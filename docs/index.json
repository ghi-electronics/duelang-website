{
  "README.html": {
    "href": "README.html",
    "title": "Documentation",
    "keywords": "Documentation This is the repository for all of our docs. To generate the docs locally: Clone/Fork the repo Open the command prompt in the documents' root folder (\"Run as Administrator\" may be necessary) Execute docfx --serve After executing the above command, a temporary webpage will appear to allow you to view the files in your browser fully rendered in HTML, for example http://localhost:8080. To install DocFX, please review and download from the following site: https://dotnet.github.io/docfx/. From there, you can go to the Getting Started page for instructions on how to install and you can go to Download Latest to download the most up to date DocFX files. Please note, you will not need to use the docfx init command as the initial JSON file is already present in our repository. WK<html>TOpdf is an optional part of the build process. You will find the needed files at the following address: https://wkhtmltopdf.org/downloads.html. Once downloaded, execute the command to install. Once installed, add the path to the installed binary to the environment variable PATH, for example \"C:\\Program Files\\wkhtmltopdf\\bin\"."
  },
  "hardware/brainpad.html": {
    "href": "hardware/brainpad.html",
    "title": "BrainPad",
    "keywords": "BrainPad Educators now have the power to use their beloved language-of-choice with BrainPad devices, thanks to DUELink! All BrainPad microcomputers are fully supported. However, BrainPad Pulse include additional natively-supported components, which are the display and the buzzer. BrainPad Pulse BrainPad Edge BrainPad Tick On-board Components Pulse Edge Tick LED ✓ ✓ 5x5 Button A ✓ ✓ ✓ Button B ✓ ✓ ✓ LCD ✓ Sound ✓ Visit the BrainPad website to learn about the product and see purchasing options. Loading the Firmware The first step to load the DUE firmware on your hardware is to navigate to the console.duelink.com and click on the Firmware tab and follow the instructions Getting Started The BrainPad website is a great place to get started, it shows the steps needed to start using the DUE Link ecosystem and coding options. Hardware Demos The edge connector on the supported BrainPad hardware combined with the ease of DUELink, opens up many possibilities to try the existing accessories available on the market. Here are just a few: Smart House This example demonstrates the extensibility of the DUE platform. Using the DUE library from within full .NET. See the code samples repo for all the available sensors. We added a BrainClip IR remote control to our demo. Smart House Sample Repo A.I. Mask Detector Harnessing the power of A.I. on a tiny micro-controller is a challenge, but easy work for the DUE platform. In this example full Python is used with the DUE platform connecting the pieces together. A.I. Mask Detector Sample Repo NeoPixel Matrix NeoPixel Matrix panels pair well with the DUE platform, because NeoPixel support is built-in. Using DUE you can quickly create games, images, or led-effects. In our samples repo, we demonstrate using DUE Script, Python, and .NET. and make a simple Falling Bird Game. Falling Bird Sample Repo"
  },
  "hardware/click.html": {
    "href": "hardware/click.html",
    "title": "MikroElectronica Click",
    "keywords": "MikroElectronica Click Thousands of Click modules are offered by MicroElekcronica. These modules range from basic to complex. This standard includes multiple ways of connecting sensors, such as SPI or I2C. This opens the door the possibilities but also means more knowledge is necessary. If this is your first hardware experience, start with 3-pin modules and then move into Qwiic and STEMMA modules. Some drivers are already available for Click modules to make this a true plug-and-play."
  },
  "hardware/display.html": {
    "href": "hardware/display.html",
    "title": "Display",
    "keywords": "Display DUELink natively supports some small displays. There are also some basic drawing facilities. See full details at the LCD API"
  },
  "hardware/fez.html": {
    "href": "hardware/fez.html",
    "title": "FEZ",
    "keywords": "FEZ These FEZ products can be used with the DUELink. FEZ Flea The FEZ Flea form factor is the same as the Seeed Studio Xiao. This opens up the option for many existing accessories. The FEZ Flea can also be soldered to a PCB just like a SoM. FEZ Pico The FEZ Pico form factor is the same as the Raspberry Pi Pico. This opens up the option for many existing accessories. The FEZ Pico also includes a STEMMA connector that can connect to many existing STEMMA modules. Visit the GHI Electronics to learn about the product and see purchasing options. Loading the Firmware The first step to load the DUELink firmware on your hardware. Navigate to the console.duelink.com and click on the Firmware tab and follow the instructions. Getting Started The DUE getting started page shows steps needed start using the DUE Link ecosystem of coding options. Hardware Demos The supported hardware's form factor opens the opportunity to use some of the many available accessories on the market. Here are just a few examples. PicoMate The PicoMate is a single-pcb with multiple Grove compatible sensors that are removable or work in place. Samples in the repo demonstrate extending DUE with Python or .NET. PicoMate Samples Repo Grove Module Shields These Grove shields are a great way to connect the many Grove modules on the market to DUE. There are many drivers located in the DUE samples driver repo to get you started. Drivers Repo Qwiic/STEMMA QT Connector The built in JST connector on the FEZ Pico opens up the door for even more expansion options, using Qwiic or STEMMA QT sensors. LED Bar Demo Mikroe Click Shield for Pico Mikroe Electronica has 1000's of Click sensors available, this shield provides an interface to those modules. Our demo in DUE Samples repo uses the LEDRing Click module. Warning Click shield for Pi Pico has a major flaw. MISO and MOSI pins are swapped on board rev 1.00. LEDRing Click Module"
  },
  "hardware/interface.html": {
    "href": "hardware/interface.html",
    "title": "Interface",
    "keywords": "Interface The connection between a DUELink Motherboard and a host device, such as a laptop, uses serial communication. This serial communication can be transported in different ways. USB Using USB is the most common and it works by simulating a virtual serial connections. This is a standard USB class that is understood by modern operating systems. There is no need to install any special USB drivers. This interface is also needed to update the firmware living on a DUELink Mainboard. A helper method is provided to help in identifying the serial port with a connected DUELink mainboard port = DUELinkController.GetConnectionPort() Bluetooth DUELink Mainboards with Bluetooth (BLE) interface use the serial profile, allowing the operating system to access the device using a wireless connection."
  },
  "hardware/led.html": {
    "href": "hardware/led.html",
    "title": "Smart LEDs",
    "keywords": "Smart LEDs Smart addressable LEDs come in all sort of styles and shapes. They come as ropes, rings and even matrices. The most commonly used type of addressable LEDs use the WS2811 controller, sometimes referred to as NeoPixel.These controllers allow a single pin to control thousands of LEDs; however, the signaling needed is time critical and not simple to generate. DUELink fully support WS2811 LEDs allowing for simple to complex LED projects to work. See the Neo LED API."
  },
  "hardware/qwiic.html": {
    "href": "hardware/qwiic.html",
    "title": "Qwiic & STEMMA Modules",
    "keywords": "Qwiic & STEMMA Modules Sparkfun Qwiic and Adafruit STEMMA modules are made to use the same tiny 4-pin connector. They utilize the I2C data bus to communicate with these modules. A good advantage of using these modules is the fact that they can be daisy chained. DUELink supports the I2C Bus natively. A relatively easy driver is needed to access the connected modules. We provide some examples for some and we can help with any necessary help. Here is an example that reads Sparkfun Qwiic Joystick From Spoarkfun docs an examples, we see that the joystick uses address 0x20. Sending 3 command will return 5 write = [0x03] read = [0,0,0,0,0] while(True): DUELink.I2c.WriteRead(0x20,write,0,1,read,0,5) X = (read[0]<<8 | read[1])>>6 Y = (read[2]<<8 | read[3])>>6 print(X, Y, \" Button = \", read[4])"
  },
  "hardware/spider.html": {
    "href": "hardware/spider.html",
    "title": "DUELink Spider",
    "keywords": "DUELink Spider With DUELink Spider, you can effortlessly connect thousands of electronic sensors and modules directly to the board. Say goodbye to intimidating loose wires and soldering – just plug and play! 3-pin Modules: These low-cost modules are available everywhere, including Amazon and Temu. (Light sensor, relay, servo motor...) Qwiic/STEMMA: SparkFun and Adafruit offer these friendly modules that are chainable through a very tiny connector. (Joystick, LEDs, Accelerometer...) mikroBus: MikroElectronika offers over a thousand modules that range from simple to complex and simply plug into DUELink . (FM Radio, Oximeter, GPS...) Displays: Several display options can be wired to the available I2C or SPI interfaces. (OLED, e-Ink, Color...) Smart LEDs: Elevate your project by easily wiring smart LEDs that come in many shapes and forms. (Ropes, Wires, Matrix...)"
  },
  "hardware/threepin.html": {
    "href": "hardware/threepin.html",
    "title": "3-pin Modules",
    "keywords": "3-pin Modules These modules are very low-cost and made by thousands of companies globally. The pinout of the three pins is the same one used by the extremely common RC Servo Motors. While the wire coloring may differ, power is always in the middle. It is usually red color. The ground pin is on one of the sides and it is usually black or brown. The signal is the last wire and it is usually yellow or orange. Depending on the module being used, the signal can be an input or an output, and it can be analog or digital. Some of these modules use data bus for transferring data. Here are a few examples. Signal Examples Digital Out Simple LED, Relay, Solenoid Digital In Button, Motion Analog Out Brushed Motor, Simple LED Analog In Light, Temperature, Joystick Data Bus Smart LEDs, Servo Motor, Smart Temp sensor"
  },
  "index.html": {
    "href": "index.html",
    "title": "DUELink",
    "keywords": "DUELink The way electronic sensors, actuators, and motherboards happily connect! *** Wait while loading......... 90% ***"
  },
  "index2.html": {
    "href": "index2.html",
    "title": "",
    "keywords": "You're DUE for something NEW! Leverage your coding skills to code things right from a PC, a phone, or even a Raspberry Pi! Read sensors and control motors using Python and other languages - no hardware experience is necessary. A DUELink board bridges your host (computer/phone...etc.) to thousands of electronic sensors and modules. This allows for an easy hardware connections. Say goodbye to intimidating loose wires and soldering - just plug-and-play! How does it work? DUELink Spider leverages the computing power and connectivity of your host device. This includes Raspberry Pi, Phones, Tablets, and PC/MAC/Linux. The DUELink Spider is not a programmable microcontroller, but a peripheral for the host device. This approach allows you to run full Python scripts, utilize JavaScript pages, tackle processor-intensive AI projects, and dive into big data analytics with ease - now with a physical element. You do not need to learn microcontrollers and you do not need to settle with MicroPython. Go ahead and enjoy your favorite machine, with your favorite coding language! Extensible Language Options While Python is the main supported language, DUELink Spider works beautifully with JavaScript pages, .NET C# projects, and more. DUELink Spider DUELink Spider is the bridge that allows you to effortlessly connect thousands of electronic sensors and modules to your PC/Phone/RPI - just plug and play! Add \"Physical Strength\" to your RPI Some seemingly impossible physical computing tasks become easily accessible through DUELink Spider. Let your Raspberry Pi do the heavy computational lifting to handle AI and other processor intensive tasks while utilizing DUELink to handle the physical computing elements such as: controlling addressable Smart LEDs, reading physical sensors (distance, light, temp), and controlling multiple motors. This perfect marriage works on other single board computers, laptops, and phones! Continuous Innovation GHI Electronics has been bridging the hardware-to-software gap for over 20 years. Our Michigan, USA headquarters is the center of our innovative engineering and quality manufacturing. We are \"Where Hardware Meets Software!\""
  },
  "software/api/analog.html": {
    "href": "software/api/analog.html",
    "title": "Analog",
    "keywords": "Analog These functions provide access to analog pins. Analog Write This feature uses software-generated PWM to control the \"Analog\" level of a pin. It has a fixed frequency of 50Hz. Analog.Write( pin, dutyCycle) pin: Pin number dutyCycle: 0 to 100 This example code will swing the analog output value up and down in a loop. Python JavaScript .NET while True: for i in range(0, 100, 10): duelink.Analog.Write('L', i) time.sleep(0.1) for i in range(90, -1, -10): duelink.Analog.Write('L', i) time.sleep(0.1) while (true) { for (let i = 0; i < 100; i+=10) { await duelink.Analog.Write('L', i); await Util.sleep(100) } for (let i = 90; i > -1; i-=10) { await duelink.Analog.Write('L', i); await Util.sleep(100) } } while (true) { for (var i = 0; i < 100; i+=10) { duelink.Analog.Write('L', i); Thread.Sleep(100); } for (var i = 90; i > -1; i-=10) { duelink.Analog.Write('L', i); Thread.Sleep(100); } } This feature works on all pins. Analog Read Use this function to read the analog level on a specific pin. Analog.Read(pin) pin: Pin number Returns: The analog value (0-100) of the pin This is an example code to read the analog level on pin 0 and print out to the console 10 times per second. Python JavaScript .NET while True: x = duelink.Analog.Read(0) print(x) time.sleep(0.1) while (true) { let x = await duelink.Analog.Read(0) console.log(x) await Util.sleep(100) } while (true) { var x = duelink.Analog.Read(0); Console.WriteLine(x); Thread.Sleep(100); } Some pins may not support analog read. Check the hardware page for a list of supported pins."
  },
  "software/api/bluetooth.html": {
    "href": "software/api/bluetooth.html",
    "title": "Bluetooth",
    "keywords": "Bluetooth Provided API allows user to set name and pin code for Bluetooth. Bluetooth.SetName(name) - Sets Bluetooth name name: Bluetooth name, max characters is 12. Default is \"DUELink\" Returns: True = success, false = fail Bluetooth.SetPinCode(code) - Sets Bluetooth pin code code: In \"text\", has to be 4 characters from 0 to 9. Default is \"1234\" Returns: True = success, false = fail The example below changes Bluetooth name to \"DUELink00\", and changes pin code to \"5678\" Python JavaScript .NET print(duelink.Bluetooth.SetName(\"DUELink00\")) time.sleep(5) # Delay few seconds for Bluetooth reset print(duelink.Bluetooth.SetPinCode(\"5678\")) console.log(await duelink.Bluetooth.SetName(\"DUELink00\")) await Util.sleep(5000) // Delay few seconds for Bluetooth reset console.log(await duelink.Bluetooth.SetPinCode(\"5678\")) duelink.Bluetooth.SetName(\"DUELink00\"); Thread.Sleep(5000) // Delay few seconds for Bluetooth reset duelink.Bluetooth.SetPinCode(\"5678\");"
  },
  "software/api/button.html": {
    "href": "software/api/button.html",
    "title": "Buttons",
    "keywords": "Buttons The button feature makes it easier to work with buttons, when compared to reading a digital pin for example. This feature is not available on all pins. However, Digital Read can be used instead, which is available on all pins. DUELink Spider supports Button on pins 1,2,3,4 plus buttons 'A' and 'B'. Tip The timeout for Button Down and Button Up are fixed to two seconds. Calling after two seconds from last press or release returns 0. Button.Enable(pin, enable) - Activates a pin to be used as a button pin: Pin number enable: True = enable, false = disabled Button.JustReleased(pin) pin: Pin number Returns: True after release first time called. If called again returns false bool Button.JustPressed(pin) - Checks if a button was pressed pin: Pin number Returns: True if button was pressed recently and continues to return 1 until the button is released This example checks button 'a'. Python JavaScript .NET duelink.Button.Enable('a', True); while True: d = duelink.Button.JustPressed('a') u = duelink.Button.JustReleased('a') if (d): print(\"Button A down\") if (u): print(\"Button A up\") time.sleep(0.2); await duelink.Button.Enable('a', true) while (true) { let d = await duelink.Button.JustPressed('a') let u = await duelink.Button.JustReleased('a') if (d) { console.log(\"Button A down\") } if (u) { console.log(\"Button A up\") } await Util.sleep(200) } duelink.Button.Enable('a', true); while (true) { var d = duelink.Button.JustPressed('a'); var u = duelink.Button.JustReleased('a'); if (d) { Console.WriteLine(\"Button A down\"); } if (u) { Console.WriteLine(\"Button A up\"); } Thread.Sleep(200); }"
  },
  "software/api/can.html": {
    "href": "software/api/can.html",
    "title": "CAN",
    "keywords": "CAN Can.Initialize(baudrate) - Initialize CAN with special baudrate baudrate: Accepts 125000, 250000, 500000, 1000000 Can.InitializeExt(phase1, phase2, prescaler, synchronizationJumpWidth) - User defined baudrate. Max 1000000 (1Mbs) phase1: Time segment 1. Max is 15 phase2: Time segment 2. Max is 7 prescaler: Baudrate prescaler, this value defines the length of a time quanta. Max is 1023 synchronizationJumpWidth: Synchronization jump width. Max is 3 Can.Available() - Count Returns: How many messages have been buffered and ready to be read Can.Write(message) - Write message message: Message to send on CAN Can.Read() - Read message Return: Message from CAN Note CAN peripheral clock is 80MHz CanMessage To send or received a message, CanMessage class is used Id - CAN id Extended - Extended flag RemoteRequest - RemoteRequest flag Length - Length of data, max is 8 Data - Array, max 8 bytes The example below initialize CAN at 500Kbs, check any message available, read, increase ID by 1 and write it back to sender Python JavaScript .NET duelink.Can.Initialize(500000) while True : if (duelink.Can.Available() > 0): message = duelink.Can.Read() # print received message detail print(f\"id: {message.Id}, ext: {message.Extended}, rtr: {message.RemoteRequest}, data: {message.Data[0]}, {message.Data[1]}, {message.Data[2]}, {message.Data[3]}, {message.Data[4]}, {message.Data[5]}, {message.Data[6]}, {message.Data[7]}\") # Increase message.Id by 1 message.Id = message.Id + 1 # send back to sender duelink.Can.Write(message) time.sleep(1) Tip To use CanMessage class, need to import: from DUELink.Can import CanMessage await duelink.Can.Initialize(500000) while (true) { if (await duelink.Can.Available() > 0){ let message = await duelink.Can.Read() // print received message detail console.log(`id: ${message.Id}, ext: ${message.Extended}, rtr: ${message.RemoteRequest}, data: ${message.Data[0]}, ${message.Data[1]}, ${message.Data[2]}, ${message.Data[3]}, ${message.Data[4]}, ${message.Data[5]}, ${message.Data[6]}, ${message.Data[7]}`) // Increase message.Id by 1 message.Id += 1 // send back to sender await duelink.Can.Write(message) } await Util.sleep(1000) } Tip To use CanMessage class, need to import: import { CanMessage } from './duelink.js' duelink.Can.Initialize(500000); while (true) { if (duelink.Can.Available() > 0){ var message = duelink.Can.Read(); // print received message detail Console.WriteLine($\"id: {read.Id}, ext: {read.Extended}, rtr: {read.RemoteRequest}, data: {read.Data[0]}, {read.Data[1]}, {read.Data[2]}, {read.Data[3]}, {read.Data[4]}, {read.Data[5]}, {read.Data[6]}, {read.Data[7]}\"); // Increase message.Id by 1 message.Id += 1 // send back to sender duelink.Can.Write(message); } Thread.Sleep(1000); }"
  },
  "software/api/digital.html": {
    "href": "software/api/digital.html",
    "title": "Digital",
    "keywords": "Digital These functions provide access to digital pins. Digital Read Read the current value of a digital pin. Digital.Read(pin, pull) pin: Pin number pull: Sets the internal pull resistors: 'None', 'PullUp', 'PullDown' Returns: True = high or false = low This example will read current value on pin 2. Python JavaScript .NET x = duelink.Digital.Read(2, 'PullUp') print(x) let x = await duelink.Digital.Read(2, 'PullUp') console.log(x) var x = duelink.Digital.Read(2, InputType.PullUp); Console.WriteLine(x); Digital Write Sets a pin's digital output. Digital.Write(pin, state) pin: Pin number state: True = high or false = low This example will set pin 2 to be High. Python JavaScript .NET duelink.Digital.Write(2, True) duelink.Digital.Write(2, true) duelink.Digital.Write(2, true);"
  },
  "software/api/distance.html": {
    "href": "software/api/distance.html",
    "title": "Distance Sensor",
    "keywords": "Distance Sensor This function is used when using distance sensors. Distance.Read(trigger, echo) - Uses ultrasonic sonic sensor to read distance. trigger: The pin number that is connected to trigger (pulse) signal echo: The pin number that is connected to echo signal, use -1 for single pin Returns: Distance in centimeters Tip Most sensors need 5V to work. This example will read distance, using pin 0 for trigger and pin 1 for echo pin. Python JavaScript .NET while True: x = duelink.Distance.Read(0, 1) if x > 0: print(x) time.sleep(0.1) while (true) { let x = await duelink.Distance.Read(0, 1) if (x > 0) console.log(x) await Util.sleep(100) } while (true) { var x = duelink.Distance.Read(0, 1); if (x > 0) Console.WriteLine(x); Thread.Sleep(100); }"
  },
  "software/api/frequency.html": {
    "href": "software/api/frequency.html",
    "title": "Frequency",
    "keywords": "Frequency This hardware-backed feature generates frequencies/signals on a pin. Since this is hardware-backed, it only works on specific pin(s) and it is very accurate. It requires no system resources to run and therefore, the function is non-blocking. This signal can be used as PWM for power level control (similar to analog out). It can also be used to control servos, generate tones...etc. See the specific hardware's page pin-out for details on supported pin(s). Freq(pin, frequency, duration, dutyCycle) - Provides an accurate hardware generated PWM signal pin: Hardware specific pin number or 'p' for on-board piezo buzzer frequency: Frequency in Hz, min 15Hz, max 10000000Hz (10MHz) duration: 0 to forever (optional. Default is 0) dutyCycle: 0.0 to 100.0 (optional. Default is 50) This example will do a loop that generates 20Hz tp 1000Hz after every 200ms. Python JavaScript .NET while True: for x in range(20, 1000): duelink.Frequency.Write('p', x, 200, 50) time.sleep(0.2) while (true){ for (let x = 20; x < 1000; x++){ await duelink.Frequency.Write('p', x, 200, 50); await Util.sleep(200) } } while (true){ for (var x = 20; x < 1000; x++){ duelink.Frequency.Write('p', x, 200, 50); Thread.Sleep(200); } } Since Freq() is a non-blocking function, it will return immediately even if duration is set to a future time. Making a second call to Freq() will terminate any existing active frequency, despite the duration of previous calls argument. In this example, 1KHz will be generated for only 2 seconds and not 5 seconds. Python JavaScript .NET duelink.Frequency.Write('p', 1000, 5000, 50) time.sleep(2) duelink.Frequency.Write('p', 0, 0, 0) await duelink.Frequency.Write('p', 1000, 5000, 50) await Util.sleep(2000) await duelink.Frequency.Write('p', 0, 0, 0) duelink.Frequency.Write('p', 1000, 5000, 50); Thread.Sleep(2000); duelink.Frequency.Write('p', 0, 0, 0);"
  },
  "software/api/i2c.html": {
    "href": "software/api/i2c.html",
    "title": "I2C",
    "keywords": "I2C I2C is one of the protocols that is used widely in most sensors. I2c.Write(address, arrayWrite, indexWrite, writeCount) - Write an array of data to an I2C slave address: I2C slave address arrayWrite: Array to send indexWrite: Index of data in the array (optional, default is 0). writeCount: The number of bytes to write (optional, default is length of array) I2c.Read(address, arrayRead, indexRead, readCount) - Read data from an I2C slave address: I2C slave address arrayRead: Array to read indexRead: Index of data in the array (optional, default is 0) readCount: The number of bytes to read (optional, default is length of array) I2c.WriteRead(address, arrayWrite, indexWrite, writeCount, arrayRead, indexRead, readCount) - Write and read data address: I2C slave address arrayWrite: Array to send indexWrite: Index of data in the array writeCount: The number of bytes to write arrayRead: Array to read indexRead: Index of data in the array readCount: The number of bytes to read Python JavaScript .NET # Write 11 and 22 to a slave at address 0x2C dataWrite = [11,22] duelink.I2c.Write(0x2C, dataWrite) # Read 2 bytes from address 0x2C dataRead = [0]*2 duelink.I2c.Read(0x2C, dataRead) # WriteRead from address 0x2C duelink.I2c.WriteRead(0x2C, dataWrite, 0, len(dataWrite), dataRead, 0, len(dataRead)) let dataWrite = [11,22] let data = new Uint8Array(2) // Write 11 and 22 to a slave at address 0x2C await duelink.I2c.Write(0x2C, dataWrite) // Read 2 bytes from address 0x2C await duelink.I2c.Read(0x2C, dataRead) // WriteRead from address 0x2C await duelink.I2c.WriteRead(0x2C, dataWrite, 0, dataWrite.length, dataRead, 0, dataRead.length) var dataWrite = new byte[] {11, 22}; var dataRead = new byte[2]; // Write 11 and 22 to a slave at address 0x2C duelink.I2c.Write(0x2C, dataWrite); // Read 2 bytes from address 0x2C duelink.I2c.Read(0x2C, dataRead); // WriteRead from address 0x2C duelink.I2c.WriteRead(0x2C, dataWrite, 0, dataWrite.Length, dataRead, 0, dataRead.Length);"
  },
  "software/api/infrared.html": {
    "href": "software/api/infrared.html",
    "title": "Infrared",
    "keywords": "Infrared IR decoder is fixed to pin 2 and 8. Infrared.Enable(pin, enable) - Enables pin for IR signal capture pin: Pin number enable: True = enable, false = disable Infrared.Read() - Reads the value from the IR enabled pin Return: Tracks the past 16 key presses and returns them. -1 if none. This example will enable and read IR code from pin 2. Python JavaScript .NET duelink.Infrared.Enable(2, True) while True: x = duelink.Infrared.Read() if x >= 0: print (x) time.sleep(1) await duelink.Infrared.Enable(2, true) while (true){ let x = await duelink.Infrared.Read() if (x >=0) console.log(x) await Util.sleep(1000) } duelink.Infrared.Enable(2, true); while (true){ var x = duelink.Infrared.Read(); if (x >=0) Console.WriteLine(x); Thread.Sleep(1000); }"
  },
  "software/api/intro.html": {
    "href": "software/api/intro.html",
    "title": "API Reference",
    "keywords": "API Reference The DUELink core library provided for multiple languages (such as Python) gives the user an easy access to the available feature through a nicely designed API. API Description Analog Read or Write analog pins Bluetooth Set name or pin code for bluetooth Button Read a button. Similar to Digital read but handles debounce Controller Area Network (CAN) Read or write message on CAN Digital Read or write digital pins Distance Read ultrasonic distance sensor Frequency Generate frequency on a specific pin. This uses hardware PWM internally I2C Access the I2C bus for transferring data Infrared Read and decode IR remote control signal LCD Draw on LCD (device specific) LED Control the on-board LED NeoPixel Control smart color LEDs Pulse Generate pulse. Great for controlling stepper motors Script Allows for expanding the system with custom scripts for advanced users Servo Control servo motors Sound Generate sound SPI Access the SPI data bus System Functions Built-in functions Temp-Humidity Works with DHT sensors Touch Allows for capacitive touch sensing UART Transfer data on the UART serial port"
  },
  "software/api/lcd.html": {
    "href": "software/api/lcd.html",
    "title": "LCD",
    "keywords": "LCD These functions allow for graphics on multiple display types, including B&W and color display. B&W Displays LCD Graphics supports SSD1306 128x64 B&W I2C, which work on all BrainPad boards. This display is found on the BrainPad Pulse by default, and can be added to the I2C channel on all of the other boards. These displays are available in multiple sizes but most common is 0.96\". The LcdConfig() function (documented below) can be used to configure the system to work with an externally connected display. Caution Displays with knock-off controller SSH1106 that is supposed to be compatible with SSD1306 did not work as expected. Color Displays Support for color displays includes ILI9342, ILI9341, and ST7735. These color displays only work on boards with SC13 chipset. The Configuration property (documented below) can be used to configure the system to work with an externally connected display. Display Configuration Display.Configuration - Property, change display configuration Type: Screen supported: BuiltIn = 0, ILI9342 = 0x80, ILI9341 = 0x81, ST7735 = 0x82, SSD1306 = 0x3C. If an SSD1306 screen has different i2c slave address 0x3C, set Type to that address directly SpiChipSelect: Chip select pin, SPI display only SpiDataControl: Data control pin, SPI display only SpiPortrait: True: Portrait, False: Landscape, SPI display only SpiFlipScreenVertical: Flip vertical, SPI display only SpiFlipScreenHorizontal: Flip horizontal, SPI display only SpiSwapRedBlueColor: Swap Red and Blue, SPI display only SpiSwapByteEndianness: Swap byte endianness WindowStartX: Default is 0. Some screens need adjust this value to work correctly WindowStartY: Default is 0. Some screens need adjust this value to work correctly Display.Configuration.Update() Apply configuration This example will set the system to use the color display adapter from Waveshare, which uses ST7735 1.8\" display. The display's chip select is on pin 2 and data control is on pin 0. There is also a backlight on pin 6 and reset on pin 1 that need to be controlled manually. Python JavaScript .NET # turn on the back-light (if needed) duelink.Digital.Write(6, True) # release reset (if needed) duelink.Digital.Write(1, True) # Set config for ST7735 SPI display duelink.Display.Configuration.Type = duelink.DisplayType.ST7735 duelink.Display.Configuration.SpiChipSelect = 2 duelink.Display.Configuration.SpiDataControl = 0 duelink.Display.Configuration.SpiPortrait = False duelink.Display.Configuration.SpiFlipScreenVertical = True duelink.Display.Configuration.SpiFlipScreenHorizontal = False duelink.Display.Configuration.SpiSwapRedBlueColor = False duelink.Display.Configuration.SpiSwapByteEndianness = False duelink.Display.Configuration.WindowStartX = 0 duelink.Display.Configuration.WindowStartY = 0 # Apply configuration duelink.Display.Configuration.Update() # Clear the screen duelink.Display.Clear(0) color = 0x00FF00 x = 0 y = 0 scaleWidth = 2 scaleHeight = 3 # Draw text duelink.Display.DrawTextScale(\"DUE has color\", color, x, y, scaleWidth, scaleHeight) # Draw some lines for c in range(2,200): duelink.Display.DrawLine(c, c, 40, c, 60) duelink.Display.DrawLine((c << 8), 200 - c, 60, 200-c, 80) duelink.Display.DrawLine((c << 16), c, 80, c, 100) # Show on screen duelink.Display.Show() // Need for DisplayType.ST7735 import { DisplayType } from './duelink.js' // turn on the back-light (if needed) await duelink.Digital.Write(6, true) // release reset (if needed) await duelink.Digital.Write(1, true) // Set config for ST7735 SPI display duelink.Display.Configuration.Type = DisplayType.ST7735 duelink.Display.Configuration.SpiChipSelect = 2 duelink.Display.Configuration.SpiDataControl = 0 duelink.Display.Configuration.SpiPortrait = false duelink.Display.Configuration.SpiFlipScreenVertical = true duelink.Display.Configuration.SpiFlipScreenHorizontal = false duelink.Display.Configuration.SpiSwapRedBlueColor = false duelink.Display.Configuration.SpiSwapByteEndianness = false duelink.Display.Configuration.WindowStartX = 0 duelink.Display.Configuration.WindowStartY = 0 // Apply configuration await duelink.Display.Configuration.Update() // Clear the screen await duelink.Display.Clear(0) const color = 0x00FF00 const x = 0 const y = 0 const scaleWidth = 2 const scaleHeight = 3 // Draw text await duelink.Display.DrawTextScale(\"DUE has color\", color, x, y, scaleWidth, scaleHeight) // Draw some lines for ( let c = 2;c < 200; c++){ await duelink.Display.DrawLine(c, c, 40, c, 60) await duelink.Display.DrawLine((c << 8), 200 - c, 60, 200-c, 80) await duelink.Display.DrawLine((c << 16), c, 80, c, 100) } // Show on screen await duelink.Display.Show() // turn on the back-light (if needed) duelink.Digital.Write(6, true); // release reset (if needed) duelink.Digital.Write(1, true); // Set config for ST7735 SPI display duelink.Display.Configuration.Type = DisplayType.ST7735; duelink.Display.Configuration.SpiChipSelect = 2; duelink.Display.Configuration.SpiDataControl = 0; duelink.Display.Configuration.SpiPortrait = false; duelink.Display.Configuration.SpiFlipScreenVertical = true; duelink.Display.Configuration.SpiFlipScreenHorizontal = false; duelink.Display.Configuration.SpiSwapRedBlueColor = false; duelink.Display.Configuration.SpiSwapByteEndianness = false; duelink.Display.Configuration.WindowStartX = 0; duelink.Display.Configuration.WindowStartY = 0; // Apply configuration duelink.Display.Configuration.Update(); // Clear the screen duelink.Display.Clear(0); uint color = 0x00FF00; var x = 0; var y = 0; var scaleWidth = 2; var scaleHeight = 3; // Draw text duelink.Display.DrawTextScale(\"DUE has color\", color, x, y, scaleWidth, scaleHeight); // Draw some lines for ( var c = 2;c < 200; c++){ duelink.Display.DrawLine((uint)c, c, 40, c, 60); duelink.Display.DrawLine((uint)(c << 8), 200 - c, 60, 200-c, 80); duelink.Display.DrawLine((uint)(c << 16), c, 80, c, 100); } // Show on screen duelink.Display.Show(); This example below will direct graphics to an external 2.42\" display with address 0x3C, wired to the 2.42\" SSD1309 display showing in the image above. Tip: A resistor on the back of the display needs to be moved to change its bus from SPI to I2C. Python JavaScript .NET i2caddress = 0x3C duelink.Display.Configuration.Type = i2caddress # apply i2c address directly duelink.Display.Configuration.Update() duelink.Display.Clear(0) duelink.Display.DrawText(\"DUE is Awesome\", 1, 0, 0) duelink.Display.Show() let i2caddress = 0x3C duelink.Display.Configuration.Type = i2caddress # apply i2c address directly await duelink.Display.Configuration.Update(); await duelink.Display.Clear(0); await duelink.Display.DrawText(\"DUE is Awesome\", 1, 0, 0); await duelink.Display.Show(); var i2caddress = 0x3C; duelink.Display.Configuration.Type = (DisplayType)i2caddress; // apply i2c address directly duelink.Display.Configuration.Update(); duelink.Display.Clear(0); duelink.Display.DrawText(\"DUE is Awesome\", 1, 0, 0); duelink.Display.Show(); Graphical Memory All LCD functions process the graphics commands in an internal memory. It starts with Clear(), which clears up the entire graphics memory to a specific color. When the user is ready, the graphical memory is transferred to the display using Show(). Display.Clear(color) - Clears the entire screen to black or white color: Color value Display.SetPixel(color, x, y) color: Color value x: x pixel value y: y pixel value Display.Show() Sends the display buffer to the LCD. Python JavaScript .NET # Clear the screen duelink.Display.Clear(0) # Set pixel color 0xFFFFFF, at x = 64, y = 32 duelink.Display.SetPixel(0xFFFFFF,64,32) # Show on screen (flush the cache) duelink.Display.Show() // Clear the screen duelink.Display.Clear(0) // Set pixel color 0xFFFFFF, at x = 64, y = 32 duelink.Display.SetPixel(0xFFFFFF,64,32) // Show on screen (flush the cache) duelink.Display.Show() // Clear the screen duelink.Display.Clear(0) // Set pixel color 0xFFFFFF, at x = 64, y = 32 duelink.Display.SetPixel(0xFFFFFF,64,32) // Show on screen (flush the cache) duelink.Display.Show() Color Value The system supports Color and B&W displays. To keep uniformity, 0 is always black and 1 is always white. Any other value is considered a standard RGB color formatted 0xRRGGBB. For example, GHI Electronics blue is 0x0977aa. Shapes Display.DrawLine(color, x1,y1,x2,y2) color: Color value x1: Starting x point y1: Starting y point x2: Ending x point y2: Ending y point Display.DrawCircle(color, x,y,radius) color: Color value x: x position of circle's center y: y position of circle's center radius: radius of the circle Display.DrawRectangle(color, x, y, width, height) color: Color value x: Starting x point y: Starting y point width: Rectangle width height: Rectangle height Display.DrawFillRect(color, x, y, width, height) color: Color value x: Starting x point y: Starting y point width: Rectangle width height: Rectangle height Python JavaScript .NET duelink.Display.Clear(0) duelink.Display.DrawLine(1, 0, 0, 128, 64) duelink.Display.DrawCircle(1, 64, 32, 31) duelink.Display.DrawRectangle(1, 10, 10, 118, 54) duelink.Display.DrawFillRect(1, 10, 10, 118, 54) duelink.Display.SetPixel(1, 64, 32) duelink.Display.Show() await duelink.Display.Clear(0) await duelink.Display.DrawLine(1, 0, 0, 128, 64) await duelink.Display.DrawCircle(1, 64, 32, 31) await duelink.Display.DrawRectangle(1, 10, 10, 118, 54) await duelink.Display.DrawFillRect(1, 10, 10, 118, 54) await duelink.Display.SetPixel(1, 64, 32) await duelink.Display.Show() duelink.Display.Clear(0); duelink.Display.DrawLine(1, 0, 0, 128, 64); duelink.Display.DrawCircle(1, 64, 32, 31); duelink.Display.DrawRectangle(1, 10, 10, 118, 54); duelink.Display.DrawFillRect(1, 10, 10, 118, 54); duelink.Display.SetPixel(1, 64, 32); duelink.Display.Show(); Text Display.DrawText(text, color, x, y) - Draw text with default font text: String message in double quotes. color: Color value x: x position y: x position Display.DrawTextTiny(text, color, x, y) - Draw tiny text - Displays tiny 5px text. text: String message in double quotes. color: Color value x: x position y: x position Display.DrawTextScale(text, color, x, y, scaleWidth, scaleHeight) - Works exactly the same as LcdText() but adds scaling. text: String message in double quotes. color: Color value x: x position y: x position scaleWidth: Width scale multiplier scaleHeight: Height scale multiplier Python JavaScript .NET x = 100 duelink.Display.Clear(0) duelink.Display.DrawText(x, 1, 0, 0) duelink.Display.DrawTextTiny(x, 1, 0, 10) duelink.Display.DrawTextScale(x, 1, 0, 20,2,2) duelink.Display.Show() let x = 100 await duelink.Display.Clear(0) await duelink.Display.DrawText(x, 1, 0, 0) await duelink.Display.DrawTextTiny(x, 1, 0, 10) await duelink.Display.DrawTextScale(x, 1, 0, 20,2,2) await duelink.Display.Show() var x = 100; duelink.Display.DrawText(x.ToString(), 1, 0, 0); duelink.Display.DrawTextTiny(x.ToString(), 1, 0, 10); duelink.Display.DrawTextScale(x.ToString(), 1, 0, 20,2,2); duelink.Display.Show(); Images There are cases where images need to be added to the screen. Of course, we are taking about basic simple images, more like a tiny sprite in a game. Display.DrawImage(array, x, y, transform) - Array of pixel, must start with 2 elements that contain the image's width and height array: Image array (see below). x: x position on screen. y: y position on screen. transform: transform modifier. Display.DrawImageScale(array, x, y, scaleWidth, scaleHeight, transform) - Works the same as DrawImage() but adds scaling. array: Image array (see below). x: x position on screen. y: y position on screen. scaleWidth: Width scale multiplier scaleHeight: Height scale multiplier transform: transform modifier. (see above) The following example displays the image array on the screen. We will place the array on multi line to help us visualize what the image might look like, but placing everything on a single line has the same effect Python JavaScript .NET img = [8, 8, # width: 8 and height: 8 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1 ] duelink.Display.Clear(0) duelink.Display.DrawImage(img, 0, 0, duelink.Display.TransformNone) duelink.Display.DrawImageScale(img, 64, 0, 4, 4, duelink.Display.TransformRotate90) duelink.Display.Show() let img = [8, 8, // // width: 8 and height: 8 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1 ] await duelink.Display.Clear(0) await duelink.Display.DrawImage(img, 0, 0, duelink.Display.TransformNone) await duelink.Display.DrawImageScale(img, 64, 0, 4, 4, duelink.Display.TransformRotate90) await duelink.Display.Show() var img = new uint[] {8, 8, // width: 8 and height: 8 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1 }; duelink.Display.Clear(0); duelink.Display.DrawImage(img, 0, 0, duelink.Display.TransformNone); duelink.Display.DrawImageScale(img, 64, 0, 4, 4, duelink.Display.TransformRotate90); duelink.Display.Show(); Transformation modifiers: Value Transformation 0 No transform 1 Flip image horizontally 2 Flip image vertically 3 Rotate image 90 degrees 4 Rotate image 180 degrees 5 Rotate the image 270 degrees(same as -90 degrees) ShowBuffer This function takes raw bitmap image (32 bit), convert to new array with ColorDepth format internally, then send the new array data to device. Display.ShowBuffer(rawData, colorDepth) - Show 32 bit raw image data on screen rawData Inout raw data. Must be 32 bit and alpha will be ignored ColorDepth: This lets the stream know what is the format of the incoming data stream. B&W displays only support 1. Color displays support 4 (palette), 8, and 16 bits. Python JavaScript .NET imageRaw = [0] * (128 * 64 * 4); # Create an image with width = 128, height = 64, 32 bit colorDepth = 1 # 1bpp for i in range(len(imageRaw)): # set all pixels to 0 imageRaw[i] = 0 duelink.Display.ShowBuffer(imageRaw, colorDepth) for i in range(len(imageRaw)): # set all pixels to1 imageRaw[i] = 1 duelink.Display.ShowBuffer(imageRaw, colorDepth) let imageRaw = new Uint8Array(128*64*4) // Create an image with width = 128, height = 64, 32 bit let colorDepth = 1 // 1bpp for (let i = 0; i < imageRaw.length; i++){ imageRaw[i] = 0 // set all pixel to zero } await duelink.Display.ShowBuffer(imageRaw, colorDepth) for (let i = 0; i < imageRaw.length; i++){ // set all pixel to 1 imageRaw[i] = 1; } await duelink.Display.ShowBuffer(imageRaw, colorDepth) var imageRaw = new byte[128 * 64 * 4]; // Create an image with width = 128, height = 64, 32 bit var colorDepth = 1; // 1bpp for (var i = 0; i < imageRaw.Length; i++){ // set all pixels to 0 imageRaw[i] = 0; } duelink.Display.ShowBuffer(imageRaw, colorDepth); for (var i = 0; i < imageRaw.Length; i++){ // set all pixels to 1 imageRaw[i] = 1; } duelink.Display.ShowBuffer(imageRaw, colorDepth); Tip On 1bpp display, the data is organized as 8bit columns going left to right and then wrapping around to the next row. Note ShowBuffer() calls Show() internally. Palette The palette is used when 4bpp color depth is used. The palette table is used as a lookup table to set the color for each one of the 16 possibilities. The default colors are below. However, the user can change it to whatever they desire. For example, they can be set to 16 shades of green to show a forest scene that needs different shades of green. Palette(index, colorValue) - Sets the desired color for a palette. index: Index number of color colorValue: A standard HEX value of the RGB color. Default colors: Index Color Value Color 0 0x000000 Black 1 0xFFFFFF White 2 0xFF0000 Red 3 0x32CD32 Lime 4 0x0000FF Blue 5 0xFFFF00 Yellow 6 0x00FFFF Cyan 7 0xFF00FF Magenta 8 0xC0C0C0 Silver 9 0x808080 Gray 10 0x800000 Maroon 11 0xBAB86C Olive 12 0x00FF00 Green 13 0xA020F0 Purple 14 0x008080 Teal 15 0x000080 Navy Example code to swap Black (index 0) and Red color (index 2) Python JavaScript .NET duelink.Display.Palette(0, 0xFF0000) duelink.Display.Palette(2, 0x000000) await duelink.Display.Palette(0, 0xFF0000) await duelink.Display.Palette(2, 0x000000) duelink.Display.Palette(0, 0xFF0000); duelink.Display.Palette(2, 0x000000);"
  },
  "software/api/led.html": {
    "href": "software/api/led.html",
    "title": "LED",
    "keywords": "LED This function is used to take control of the on-board LED. It is non-blocking so it can be used as a status indicator for your programs while they run. Led.Set(highPeriod, lowPeriod, count) highPeriod: The duration in milliseconds the LED is on. lowPeriod: The duration in milliseconds the LED is off. count: The number of times the LED will blink. Python JavaScript .NET duelink.Led.Set(1000, 1000, 10) await duelink.Led.Set(1000, 1000, 10) duelink.Led.Set(1000, 1000, 10); Tip Setting count to -1 will blink the LED forever, and 0 will turn off the LED."
  },
  "software/api/neopixel.html": {
    "href": "software/api/neopixel.html",
    "title": "NeoPixel",
    "keywords": "NeoPixel Neo.Clear() - Clears all LEDs (in memory). Needs Neo.Show() to see the affect Neo.SetColor(int index, uint color) - Sets a specific LED to a color. Needs Neo.Show() to see affect index: The LED index where 0 is first one and supporting up to 1024 LEDs color: Color levels, 32 bit format Neo.SetRGB(int index, byte red, byte green, byte blue) - Sets a specific LED to a color. Needs Neo.Show() to see affect index: The LED index where 0 is first one and supporting up to 1024 LEDs red, green, blue: Color levels, 0 to 255 Neo.SetMultiple(int pin, uint[] color) - Sets multiple leds with color array. No need Neo.Show() to see affect pin: Pin connected to NeoPixel color: Array of color levels, 32 bit format NeoShow(pin, count) - All NeoPixel code is held internally until show is called pin: Pin connected to NeoPixel count: The count of LEDs to update and show Python JavaScript .NET duelink.Neo.Clear() # Clear duelink.Neo.SetColor(0, 0xFFFFFF)# Set first led to white duelink.Neo.Show(6, 1) # show first led on pin 6 duelink.Neo.SetRGB(1,0xFF,0x00,0x00) # Set second led to red duelink.Neo.Show(6, 2)# show first 2 leds on pin 6 #set first three leds to red, green, blue. SetMultiple call show internally, no need to call show duelink.Neo.SetMultiple(6, [0xff0000, 0x00FF00, 0x0000FF]) await duelink.Neo.Clear() // Clear await duelink.Neo.SetColor(0, 0xFFFFFF)// Set first led to white await duelink.Neo.Show(6, 1) // show first led on pin 6 await duelink.Neo.SetRGB(1,0xFF,0x00,0x00) // Set second led to red await duelink.Neo.Show(6, 2)// show first 2 leds on pin 6 //set first three leds to red, green, blue. SetMultiple call show internally, no need to call show await duelink.Neo.SetMultiple(6, [ 0xff0000, 0x00FF00, 0x0000FF ]) duelink.Neo.Clear(); // Clear duelink.Neo.SetColor(0, 0xFFFFFF);// Set first led to white duelink.Neo.Show(6, 1); // show first led on pin 6 duelink.Neo.SetRGB(1,0xFF,0x00,0x00); // Set second led to red duelink.Neo.Show(6, 2);// show first 2 leds on pin 6 //set first three leds to red, green, blue. SetMultiple call show internally, no need to call show duelink.Neo.SetMultiple(6, new uint[] { 0xff0000, 0x00FF00, 0x0000FF });"
  },
  "software/api/pulse.html": {
    "href": "software/api/pulse.html",
    "title": "Pulse",
    "keywords": "Pulse Generate pulses with delay. This feature is great for controlling stepper motors. Pulse.Set(pin, pulseCount, pulseDuration) - Generate pulses pin: Pin number pulseCount: Count of pulse will be generated pulseDuration Length of pulse, in microsecond The example below generate 400 pulses (step) on pin 6. Each pulse has 1000us (500us high and 500us low) Python JavaScript .NET duelink.Pulse.Set(6, 400, 1000) await duelink.Pulse.Set(6, 400, 1000) duelink.Pulse.Set(6, 400, 1000);"
  },
  "software/api/script.html": {
    "href": "software/api/script.html",
    "title": "Script",
    "keywords": "Script These methods allow developers to control DUE Scripts right from within Python, JavaScript or .NET Script.New() - Clears the program stored in flash Script.Load(script) - Loads the line into internal buffer script: Line to load into internal buffer Script.Record() - Sends the internal buffer to the device, overwriting any previous programs Script.Read() - Read the program stored in flash and return as string Script.Execute(script) - Executes the single line of code immediately script: Script to be executed This is an example to execute a single line in immediate mode. This does not modify the application stored in flash. Python JavaScript .NET duelink.Script.Execute(\"LED(200,200,10)\") await duelink.Script.Execute(\"LED(200,200,10)\") duelink.Script.Execute(\"LED(200,200,10)\"); This example will check any script stored in flash, and clear them if program found. Python JavaScript .NET currentScript = duelink.Script.Read() if (currentScript != \"\"): duelink.Script.New() let currentScript = await duelink.Script.Read() if (currentScript != \"\") await duelink.Script.New(); var currentScript = duelink.Script.Read(); if (currentScript != \"\") duelink.Script.New(); This example will load a simple program line by line and then record it. Variable c is used to indicate how many times the LED will blink for, which is 10 in this case. Python JavaScript .NET duelink.Script.Load(\"c = 10\") duelink.Script.Load(\"@Blink\") duelink.Script.Load(\"Led(100,100,c)\") duelink.Script.Record() await duelink.Script.Load(\"c = 10\") await duelink.Script.Load(\"@Blink\") await duelink.Script.Load(\"Led(100,100,c)\") await duelink.Script.Record() duelink.Script.Load(\"c = 10\"); duelink.Script.Load(\"@Blink\"); duelink.Script.Load(\"Led(100,100,c)\"); duelink.Script.Record(); You can then access a previously recorder program using goto (to label) or by calling a function that has a return. This example calls the recorded program above by executing a single line that contains two commands. The first one sets c to 5 and the second will send execution to @Blink, which will cause the LED to blink 5 times. Python JavaScript .NET duelink.Script.Execute(\"c=5:goto Blink\") await duelink.Script.Execute(\"c=5:goto Blink\") duelink.Script.Execute(\"c=5:goto Blink\");"
  },
  "software/api/servo.html": {
    "href": "software/api/servo.html",
    "title": "Servo Motor",
    "keywords": "Servo Motor Servo.Set(pin, degree) - Sets servo motor connected to pin to a specific position pin: Pin number. Pin 5 and 6 supported by hardware PWM which is more accurate than other pins degree: 0 to 180 Python JavaScript .NET while True: duelink.Servo.Set(7, 0) time.sleep(1) duelink.Servo.Set(7, 45) time.sleep(1) duelink.Servo.Set(7, 90) time.sleep(1) duelink.Servo.Set(7, 135) time.sleep(1) duelink.Servo.Set(7, 180) time.sleep(1) while (true) { await duelink.Servo.Set(7, 0) await Util.sleep(1000) await duelink.Servo.Set(7, 45) await Util.sleep(1000) await duelink.Servo.Set(7, 90) await Util.sleep(1000) await duelink.Servo.Set(7, 135) await Util.sleep(1000) await duelink.Servo.Set(7, 180) await Util.sleep(1000) } while (true) { duelink.Servo.Set(7, 0); Thread.Sleep(1000); duelink.Servo.Set(7, 45); Thread.Sleep(1000); duelink.Servo.Set(7, 90); Thread.Sleep(1000); duelink.Servo.Set(7, 135); Thread.Sleep(1000); duelink.Servo.Set(7, 180); Thread.Sleep(1000); } Tip Many servo motors need 5V to work."
  },
  "software/api/sound.html": {
    "href": "software/api/sound.html",
    "title": "Sound",
    "keywords": "Sound Beep() uses any pin to generate a tone. Beep(pin, frequency, duration) - Creates a tone for a specified duration on any pin pin: Pin number, 'p' used with on-board piezo buzzer frequency: The frequency in Hz, max value is 10KHz duration: The duration of the beep in milliseconds, max value is 1000ms This example code will generate beep on pin 0 and on-board piezo buzzer at frequency 256Hz for one second. Python JavaScript .NET duelink.Sound.Beep(0, 256, 1000) duelink.Sound.Beep('p', 256, 1000) await duelink.Sound.Beep(0, 256, 1000) await duelink.Sound.Beep('p', 256, 1000) duelink.Sound.Beep(0, 256, 1000) duelink.Sound.Beep('p', 256, 1000) Note This feature is blocking, so the rest of your code will stop until Beep() is completed."
  },
  "software/api/spi.html": {
    "href": "software/api/spi.html",
    "title": "SPI",
    "keywords": "SPI Spi.Write(arrayWrite, indexWrite, writeCount, chipselect) - Write data array to device arrayWrite: Array to send indexWrite: Index of data in the array (optional) writeCount: The number of bytes to write (optional) chipselect: Chip select pin (optional) Spi.Read(arrayRead, indexRead, readCount, chipselect) - Read data from device arrayRead: Array to read indexRead: Index of data in the array (optional) readCount: The number of bytes to read (optional) chipselect: Chip select pin (optional) Spi.WriteRead(arrayWrite, indexWrite, writeCount, arrayRead, indexRead, readCount, chipselect) - WriteRead data arrayWrite: Array to send indexWrite: Index of data in the array writeCount: The number of bytes to write arrayRead: Array to read indexRead: Index of data in the array readCount: The number of bytes to read chipselect: Chip select pin (optional) Python JavaScript .NET arrayWrite = [ 0xAA, 0x55, 0xAA, 0x55 ] arrayRead = [0] * 4 chipselect = 2 duelink.Spi.Write(arrayWrite) duelink.Spi.Write(arrayWrite, 0, 2, chipselect) duelink.Spi.Read(arrayRead) duelink.Spi.Read(arrayRead, 0, 2, chipselect) duelink.Spi.WriteRead(arrayWrite, 0, arrayWrite.Length, arrayRead, 0, arrayRead.Length, chipselect) let arrayWrite = [ 0xAA, 0x55, 0xAA, 0x55 ] let arrayRead = new Uint8Array(4) let chipselect = 2; await duelink.Spi.Write(arrayWrite) await duelink.Spi.Write(arrayWrite, 0, 2, chipselect) await duelink.Spi.Read(arrayRead) await duelink.Spi.Read(arrayRead, 0, 2, chipselect) await duelink.Spi.WriteRead(arrayWrite, 0, arrayWrite.Length, arrayRead, 0, arrayRead.Length, chipselect) var arrayWrite = new byte[4] { 0xAA, 0x55, 0xAA, 0x55 }; var arrayRead = new byte[4]; var chipselect = 2; duelink.Spi.Write(arrayWrite); duelink.Spi.Write(arrayWrite, 0, 2, chipselect); duelink.Spi.Read(arrayRead); duelink.Spi.Read(arrayRead, 0, 2, chipselect); duelink.Spi.WriteRead(arrayWrite, 0, arrayWrite.Length, arrayRead, 0, arrayRead.Length, chipselect);"
  },
  "software/api/systemfunctions.html": {
    "href": "software/api/systemfunctions.html",
    "title": "System Functions",
    "keywords": "System Functions System.Print(text) - Prints the value of the argument to the console on the same line text: String or variable System.Println(text) - Prints the value of the argument to the console then moves to the next line text: String or variable System.Reset(loader) - Resets the board loader: 0 = system reset, 1 = reset and stay in loader mode System.GetTickMilliseconds() - Read system ticks in milliseconds System.GetTickMicroseconds() - Read system ticks microseconds System.Wait(duration) - Holds program from running duration: Duration in milliseconds System.Version - Returns the current firmware version The last character returned in Version is board Board Character DUElink Spider D Pulse P Edge E Flea F Pico I Example: Python JavaScript .NET # print \"Hello world\" duelink.System.Print(\"Hello world\") # print \"Hello world\" and add new line duelink.System.Println(\"Hello world\") # Check version number print(duelink.System.Version) # Get device tick in millisecond print(duelink.System.GetTickMilliseconds()) # Get device tick in microsecond print(duelink.System.GetTickMicroseconds()) # Delay 1 second duelink.System.Wait(1000) # Reset the device duelink.System.Reset(0) // print \"Hello world\" await duelink.System.Print(\"Hello world\") // print \"Hello world\" and add new line await duelink.System.Println(\"Hello world\") // Check version number console.log(duelink.System.Version) // Get device tick in millisecond console.log(await duelink.System.GetTickMilliseconds()) // Get device tick in microsecond console.log(await duelink.System.GetTickMicroseconds()) // Delay 1 second await duelink.System.Wait(1000) // Reset the device await duelink.System.Reset(0) // print \"Hello world\" duelink.System.Print(\"Hello world\"); // print \"Hello world\" and add new line duelink.System.Println(\"Hello world\"); // Check version number Console.WriteLine(duelink.System.Version); // Get device tick in millisecond Console.WriteLine(duelink.System.GetTickMilliseconds()); // Get device tick in microsecond Console.WriteLine(duelink.System.GetTickMicroseconds()); // Delay 1 second duelink.System.Wait(1000); // Reset the device duelink.System.Reset(0);"
  },
  "software/api/temp-humidity.html": {
    "href": "software/api/temp-humidity.html",
    "title": "Temperature and Humidity",
    "keywords": "Temperature and Humidity Works with the DHT line of low-cost temperature & humidity sensors. Temperature.Read(pin, type) - Reads sensor temperature data on connected pin pin: Pin number type: DHT11 = 11, DHT12 = 12, DHT22 = 22, DHT21 = 21 Returns: Temperature in Celsius. Humidity.Read(pin, type) - Reads sensor humidity data on connected pin pin: Pin number type: DHT11 = 11, DHT12 = 12, DHT22 = 22, DHT21 = 21 Returns: Humidity level 0 to 100. This example reads temperature and humidity every one second, using DHT11 sensor and connected to pin 0. Python JavaScript .NET while True: print(duelink.Humidity.Read(0, 11)) print(duelink.Temperature.Read(0, 11)) time.sleep(1) while (true){ console.log(await duelink.Humidity.Read(0, 11)) console.log(await duelink.Temperature.Read(0, 11)) await Util.sleep(1000) } while (true){ Console.WriteLine(duelink.Humidity.Read(0, 11)); Console.WriteLine(duelink.Temperature.Read(0, 11)); Thread.Sleep(1000); }"
  },
  "software/api/touch.html": {
    "href": "software/api/touch.html",
    "title": "Touch",
    "keywords": "Touch This feature allows sensing of a finger or human touch to a pin, or when using a touch screen, use 'x' or 'y' to return the x & y positions where the screen is being touched. Touch.Read(pin) - Read pin for touch, or reads the x y position on a touch screen pin: Pin number, 'x', or 'y' pin Returns: 0 = pin not touched, 1 = pin touched x or y Returns: -1 = screen not touched, x position , y position This example detects human touching on pin 6, interval 100ms Python JavaScript .NET while True: touched = duelink.Touch.Read(6) if (touched): print(\"touched\") time.sleep(0.1) while (true){ let touched = await duelink.Touch.Read(6) if (touched) console.log(\"touched\") await Util.sleep(100) } while (true){ var touched = duelink.Touch.Read(6); if (touched) Console.WriteLine(\"touched\"); Thread.Sleep(100); }"
  },
  "software/api/uart.html": {
    "href": "software/api/uart.html",
    "title": "UART",
    "keywords": "UART Uart.Enable(baudRate) - Sets the baud rate UART baudRate: Any commonly used standard baud rate Uart.Read() - Read UART data Returns: A byte read from UART Uart.Write(data) - Write UART data data: Data byte to send on UART Uart.BytesToRead() - Count Returns: How many bytes have been buffered and ready to be read The example below enables UART at baudrate 115200, check how many bytes buffered, read and plus 1, then send back to sender Python JavaScript .NET duelink.Uart.Enable(115200) while True: if (duelink.Uart.BytesToRead() > 0): data = duelink.Uart.Read() duelink.Uart.Write(data + 1) time.sleep(0.1) await duelink.Uart.Enable(115200) while (true){ if (await duelink.Uart.BytesToRead() > 0){ let data = await duelink.Uart.Read() await duelink.Uart.Write(data + 1) } await Util.sleep(100) } duelink.Uart.Enable(115200); while (true){ if (duelink.Uart.BytesToRead() > 0){ var data = duelink.Uart.Read(); duelink.Uart.Write((byte)(data + 1)); } Thread.Sleep(100); }"
  },
  "software/coding-options/cpp.html": {
    "href": "software/coding-options/cpp.html",
    "title": "C++",
    "keywords": "C++ C++ is a high-level, general-purpose programming language that has been around for many years. The support for C++ is incomplete and only provided as a reference for those interested in exploring the possibilities. An example can be found on the GitHub DUELink Samples Repo."
  },
  "software/coding-options/dotnet.html": {
    "href": "software/coding-options/dotnet.html",
    "title": ".NET",
    "keywords": ".NET The .NET DUELink library allows full .NET programs to access physical sensors and actuators. This allows complex .NET programs to do all the heavy lifting and send only the necessary components to control devices. The provided library is implemented in C# but the user can use any .NET system, such as Visual Basic. Setup This page assumes the user is already familiar with .NET C# and there is a development machine that is already setup to build and run .NET programs. Tip Make sure your hardware is updated with the latest firmware listed on the downloads page. Start a new project with a simple line of code to test out the project is running Tip C# Top level statements feature is being utilized, but not required. Console.WriteLine(\"Hello, World!\"); Download and install the latest GHIElectronics.DUELink library from NuGet.org. Alternatively, get it from the downloads page. Blinky! Our first program will blink the on-board on for 200ms then it shuts off for 800ms, and does this 20 times. using GHIElectronics.DUELink; Console.WriteLine(\"Hello DUE!\"); var availablePort = DUELinkController.GetConnectionPort(); var duelink = new DUELinkController(availablePort); // Flash the LED (on for 200ms, off for 800ms, 20 times) duelink.Led.Set(200, 800, 20); Console.WriteLine(\"Bye DUE!\"); .NET API The API page includes all details and examples to use all the available \"physical world\" services. Use the above example program to initiate the hardware, instantiate the duelink object, and then use any of the available APIs, such as `duelink.Sound.Beep('p', 500, 1000)' to generate a beep using the on-board peizo buzzer with a frequency of 500Hz for 1000ms"
  },
  "software/coding-options/excel.html": {
    "href": "software/coding-options/excel.html",
    "title": "Excel",
    "keywords": "Excel DUELink allows support on many systems, and Microsoft Excel is one the supported options! Yes, you can access devices right from spreadsheets! Combine that with VB macros and you have unlimited options. This is an experimenter support and only shows a very basic use for advanced users that understand DUELink Scripts. Setup The access to the device is done though Excel Data Streamer plug-in. Enabling the streamer is simple as it is already built in: Go to File > Options In the Excel Options dialog click Add-ins At the bottom of the dialog under Manage: drop-down select COM Add-ins and click Go Check the box for Microsoft Data Streamer for Excel You should now see the Data Streamer tab in the Excel ribbon. Connect the correct COM port and you will be presented with 4 new tabs (Data In, Data Out, Settings, and Manifest). Blinky! Our first program will blink the on-board on for 200ms then it shuts off for 800ms, and does this 20 times.. Go to Settings and change the Data Channels to 1 Go to the Data Out tab and enter the following text right under CH1 column Led(200, 800, 20) The LED should be blinking now."
  },
  "software/coding-options/intro.html": {
    "href": "software/coding-options/intro.html",
    "title": "Coding Options",
    "keywords": "Coding Options DUELink ships with multiple supported languages. Language Software Support Python Full Library & Full Support JavaScript Full Library & Full Support .NET Full Library & Full Support Swift Demo Sample C++ Demo Sample Excel Demo Sample Other Demo using MIT App Inventor Open Source Libraries for the supported languages are provided open-source and found at the DUELink Libraries repo. We invite you to learn more about the internal workings of DUELink Engine and also invite you to support additional systems and languages. Also, check out the many provided samples. DUELink Scripts Beyond using high level programming languages, the DUELink Engine includes DUELink Script for special uses."
  },
  "software/coding-options/javascript.html": {
    "href": "software/coding-options/javascript.html",
    "title": "JavaScript",
    "keywords": "JavaScript JavaScript is one of the core technologies used by the World Wide Web. 98% of all websites use JavaScript. Websites can now use the provided DUELink JavaScript library to access the physical world. Here is a website demo to demonstrate how JavaScript can control actuators and read sensors: demo.duelink.com Setup This page assumes the user is already familiar with JavaScript and there is a development machine that is already setup to build and run JavaScript programs. We'll be running our program on a local machine using NodeJS. Install duelink packgage: npm install duelink If using serialport, dlserialusb package is needed: npm install dlserialusb Tip Make sure your hardware is updated with the latest firmware listed on the downloads page. Start a new project with a simple line of code to test out the project is running. console.log(\"Hello World\"); Blinky! Our first program will blink the on-board on for 200ms then it shuts off for 800ms, and does this 20 times. We will be using SerialUSB() here. If using a web browser, use WebSerial() instead. const { SerialUSB } = require(\"dlserialusb\"); const { DUELinkController } = require(\"duelink\"); async function Blinky() { let duelink = new DUELinkController(new SerialUSB()); await duelink.Connect(); // Flash the LED (on for 200ms, off for 800ms, 20 times) await duelink.Led.Set(200,800,20); } Blinky() JavaScript API The API page includes all details and examples to use all the available \"physical world\" services. Use the above example program to initiate the hardware, instantiate the duelink object, and then use any of the available APIs, such as `duelink.Sound.Beep('p', 500, 1000)' to generate a beep using the on-board peizo buzzer with a frequency of 500Hz for 1000ms"
  },
  "software/coding-options/other.html": {
    "href": "software/coding-options/other.html",
    "title": "Other Languages",
    "keywords": "Other Languages Any system with serial port access can utilize a DUELink Motherboard. For example, MIT App Inventor can be used to build a phone app using blocks. All the source codes for the demos are located at https://github.com/ghi-electronics/due-samples. The provided libraries are also open source, located at https://github.com/ghi-electronics/due-libraries"
  },
  "software/coding-options/python.html": {
    "href": "software/coding-options/python.html",
    "title": "Python",
    "keywords": "Python Python is the main language used with AI and data science. The provided DUELink Python library allows a full standard Python program to access the physical world. For example, an AI vision facial recognition can now control a door lock. Setup This page assumes the user is already familiar with Python and there is a development machine that is already setup to build and run Python programs. No changes are needed there but we are using Microsoft Visual Studio Code as a personal preference. Tip Make sure your hardware is updated with the latest firmware listed on the downloads page. Start a new project with a simple line of code to test out the project is running. print(\"Hello DUELink!\") We now need to install the DUE Python library pip install DUELink. The DUELink package will also install all required dependencies. Tip The DUE python library requires pySerial, which may require an admin access to install. Blinky! Our first program will blink the on-board on for 200ms then it shuts off for 800ms, and does this 20 times. from DUELink.DUELinkController import DUELinkController print(\"Hello DUE!\") availablePort = DUELinkController.GetConnectionPort() duelink = DUELinkController(availablePort) # Flash the LED (on for 200ms, off for 800ms, 20 times) duelink.Led.Set(200,800,20) print(\"Bye DUE!\") Python API The API page includes all details and examples to use all the available \"physical world\" services. Use the above example program to initiate the hardware, instantiate the duelink object, and then use any of the available APIs, such as `duelink.Sound.Beep('p', 500, 1000)' to generate a beep using the on-board peizo buzzer with a frequency of 500Hz for 1000ms"
  },
  "software/coding-options/swift.html": {
    "href": "software/coding-options/swift.html",
    "title": "Swift",
    "keywords": "Swift Swift can be used to give you access to the physical world on MacOS devices. The support for SWIFT is incomplete and only provided as a reference for those interested in exploring the possibilities. An example can be found on the GitHub DUELink Samples Repo."
  },
  "software/downloads.html": {
    "href": "software/downloads.html",
    "title": "DUE Downloads",
    "keywords": "DUE Downloads The downloads on this page are automated through the many available on-line services. They are also made available here for convenience. Software status legend: Status Meaning Production (RTW) Ready to be used commercially (ready to wear). Release Candidate (RC) Could become a production release if proven solid. Preview Preview of the next release, not quite ready for production use. Firmware SC13 (DUELink Spider, FEZ Flea/Pico, BrainPad Pulse) File Date Status v1.1.6 2024-09-26 RC v1.1.4 2023-10-09 RC v1.1.3 2023-09-21 RC v1.1.2 2023-09-18 RC v1.1.0 2023-08-08 RC v1.0.3 2023-05-30 RC v1.0.2 2023-05-24 RC v1.0.1 2023-05-19 RC SC007 (BrainPad Edge) File Date Status v1.1.4 2023-10-09 RC v1.1.3 2023-09-21 RC v1.1.2 2023-09-18 RC v1.1.0 2023-08-08 RC v1.0.3 2023-05-30 RC v1.0.2 2023-05-24 RC v1.0.1 2023-05-19 RC Library .NET NuGet Library Tip These are hosted on NuGet.org. These downloads are optional. File Date Status v1.1.6 2024-09-26 RC v1.1.1 2023-09-26 RC v1.1.0 2023-08-08 RC v1.0.3 2023-05-30 RC v1.0.2 2023-05-24 RC v1.0.1 2023-05-19 RC Python Library Tip These are hosted on pypi.org and can be fetched using pip. These download are optional. File Date Status v1.1.6 2024-09-26 RC v1.1.1 2023-09-26 RC v1.1.0 2023-08-08 RC v1.0.3 2023-05-30 RC v1.0.2 2023-05-24 RC v1.0.1 2023-05-19 RC JavaScript Library File Date Status v1.1.6 2024-09-26 RC v1.1.1 2023-09-26 RC v1.1.0 2023-08-08 RC v1.0.3 2023-05-30 RC Release Notes v1.1.6: 2024-09-27 Firmware: Add DUELink Spider Library: Add DUELink Spider Remove Script.IsRunning, Script.Run Fix bugs v1.1.4: 2023-10-09 Firmware: Improved SoftwarePwm Add 20ms debouce for button v1.1.3: 2023-09-26 Firmware: Increased heap to 40K for SC13 and 6K for SC007 Fixed touch read x,y on SC007 need return -1 Fixed Touchread display doesn't work in Program mode v1.1.1: 2023-09-26 Library: Fix reading Temperture and huminity return bool value v1.1.0: 2023-08-08 Firmware: Added support for ST7735, ILI9341, ILI9342 SPI displays (on BrainPad Pulse) Added support for 1bpp, 4bpp, 8bpp, 16bpp color depth to LcdStream Fixed DH11 sensor Add 5x5 font Add onewire protocal Add 'log' command which outputs to console. Print now outputs to screen only Rework LCDConfig take four arguments Several internal bugs and improvements Library: Fixed Beep 'P' doesn't work. Added TransferBlockDelay, TransferBlockSizeMax property (DUELinkController class) Update API to match the firmware changs v1.0.3: 2023-05-30 Firmware: Fixed issues with labels Library: Add DrawImage and DrawImageScale Library: Various improvements and changes v1.0.2: 2023-05-24 Add support for single wire distance sensors Support NeoPixel on any pin Array initialization, with multi line support Added LcdImage(), use an array to sprites Add support for Temp and Humidity sensors: DHT11 and DHT22 Remove Sound and open Frequency to support accept pins Support Beep in Pulse buzzer Duty cycle range on Frequency is now 0 to 100 Various improvements and changes v1.0.1: 2023-05-19 Complete API overhaul, Replacing v1.0.0. v1.0.0: 2023-05-05 Initial Release"
  },
  "software/engine/console.html": {
    "href": "software/engine/console.html",
    "title": "DUE Console",
    "keywords": "DUE Console The DUE Console provides many functionalities. It is a great start to verify the device is functioning properly. It is also a great place to learn about and use DUELink Scripts. console.duelink.com Immediate Window The immediate text box sends and runs the code immediately on the DUE hardware as soon as the Enter key or arrow button is pressed. Try DWrite('L',1) to run the LED on and then DWrite('L',0) to turn it off. Log & History Windows The DUE Log window is where DUE hardware will talk back to the console. Log() functions appear directly in this window. The History windows provides a history of your DUE session. The eraser button clears the windows. Log(\"This is where log outputs appear\") Connect Select the connect button to connect to the DUE hardware. Record Sends the script in the editor window to the DUE hardware's flash. Play Runs the code that is stored in flash. Stop Stops the program running on the DUE hardware. List The List button loads the program currently stored in flash into the editor window. Download Saves the code in the consoles editor window to a text file. Load Loads a saved program into the editor. Zoom Zooms the edit window in and out. Docs Links to the DUE Script Documentation. Demos Select from pre-built DUE Script Demos that load into the edit window. Firmware Select and load the appropriate firmware to your device. Theme Changes the consoles theme to Light or Dark."
  },
  "software/engine/intro.html": {
    "href": "software/engine/intro.html",
    "title": "Internal Engine",
    "keywords": "Internal Engine DUELink internal engine is a runtime that interprets and runs DUELink Scripts. These scripts are remotely sent and executed by the connected host. For example, when calling duelink.Digital.Write(0, true) in Python, the API will end up sending DWrite(0,1) to the engine. Tip The documentation of DUELink's internal engine and DUELink scripts are furnished for advanced user looking to expand the system's functionality. It is possible to record scripts that persist on a DUELink Motherboard. This can be used for two purposes. First, to expand available the functionality and define new commands. This is helpful in real-time applications or to speed things up, where calling this custom method from the host machine will process multiple tasks internally. The second purpose is to allow a DUELink Motherboard to run stand alone to handle small stand alone tasks that does not require high level language such as Python. DUELink API Reference Analog Function Description ARead(pin) pin: pin number - Returns: 0 to 100 AWrite(pin, dutyCycle) pin: pin number - dutyCycle: 0 to 100 Beep Function Description Beep(pin, frequency, duration) pin: pin number or 'p' - frequency: Hz max 10KHz - duration: milliseconds Button Function Description BtnEnable(pin, enable) pin: pin number, 'a' or 'b' - enable: 1 = enable 0 = disabled BtnUp(pin) pin: pin number, 'a' or 'b' - Returns: 1 after first time called. 0 if called again BtnDown(pin) pin: pin number, 'a' or 'b' - Returns: 1 if button is pressed Cosine Function Description Cos(number) Returns: cosine of its argument Digital Function Description DRead(pin, pull) pin: pin number - pull: 0 = none, 1 = up, 2 = down - Returns: 1 = high or 0 = low DWrite(pin, state) pin: pin number - state: 1 = high or 0 = low Echo Echoes back what is received useful when using a terminal program Function Description Echo(state) state: 0 = enable or 1 = disable Format Function Description Fmt() Formats multiple arguments into a single string Frequency Function Description Freq(pin, frequency, duration, dutyCycle) pin: pin number - frequency: in KHz - duration: 0 to forever - dutyCycle: 0 to 100 Get Character Function Description GetCh() Returns: character input in ASCII format, -1 = no character Get Number Function Description GetNum() Reads number input, can be used with IsNAN() Humidity Function Description Humidity(pin, type) pin: pin number - type: DHT11 = 11, DHT12 = 12, DHT22 = 22, DHT21 = 21 - Returns: Humidity 0 to 100 I2C Function Description I2cBytes(address, arrayWrite, writeCount, arrayRead, readCount) address: I2C slave address - arrayWrite: array to send, writeCount: number of bytes to write, arrayRead: array to read,readCount: Number bytes to read Infrared Function Description IrEnable(pin,enable) pin: on supported pins enable: 1 = enable or 0 = disable IrRead() Returns: key press value 0 to 24 LCD Drawing Function Description LcdClear(color) color: 0 = black 1= white or any color value LcdCircle(color, x, y, radius) color: 0 = black or 1 = white - x: x circle center value - y: y circle center - radius: radius of circle LcdConfig(output, address) output: 0 = none, 1 = console, 2 = LCD and console - address: I2C address, 0 = default BrainPad Pulse LcdFill(color, x, y, width, height) color: 0 = black or 1 = white - x: starting x point - y: starting y point - width: rectangle width - height: rectangle height LcdImg(array, x, y, transform) array: image array - x: x position - y: y position - transform: 0 = none, 1 = flip horz, 2 = flip vert, 3 = 90 deg, 4 = 180 deg, 5 = 270 deg LcdImgS(array, x, y, transform, scaleWidth, scaleHeight) same as LcdImg() adds scaleWidth and scaleHeight LcdLine(color, x1, y1, x2, y2) color: 0 = black or 1 = white or any color value- x1: starting x point - y1: starting y point - x2: ending x point - y2: ending y point LcdPixel(color, x, y) color: 0 = black or 1 = white - x: x pixel value - y: y pixel value LcdRect(color, x, y, width, height) color: 0 = black or 1 = white or any color value- x: starting x point - y: starting y point - width: rectangle width - height: rectangle height LcdText(\"text\", color, x, y) text: string message in quotes, use Str() to convert variable - color: 0 = black or 1 = white - x: x position - y: y position LcdTextT(\"text\", color, x, y) displays tiny 5px text: , use Str() to convert variable - color: 0 = black or 1 = white - x: x position - y: y position LcdTextS(\"text\", color, x, y, scaleWidth, scaleHeight) same as LcdText() adds scaleWidth and scaleHeight LcdShow() sends the display buffer to the LCD LcdClear(color) color: 0 = black 1= white or any color value Log Function Description Log() sends content to the output on the same line LogLn() sends content to the output on a new line LED On-board Function Description LED(high, low, count) high: duration on in milliseconds, low: duration off in milliseconds, count: number of times to blink NeoPixel Function Description NeoClear() clears all LEDS in memory needs NeoShow() NeoSet(index, red, green, blue) index: led from 0 to 255, red, green, blue: color levels 0 to 255 NeoShow(pin, count) pin: pin number - count: number of LEDs to update Print Function Description Print(\"text\" or variable) returns the value of it's argument PrintLn(\"text\" or variable) returns the value of it's argument with line breaks Distance Sensor Function Description ReadDistance(trigger, echo) trigger: pin number of trigger - echo: pin number of echo, -1 for single pin - Returns: distance in centimeters Reset Function Description Reset(loader) loader: 0 = system reset, 1 = reset to loader mode Random Numbers Function Description Rnd(max) max: maximum value of random number - Returns: random number between 0 and max Servo Motors Function Description ServoSet(pin, degree) pin: pin number - degree: 0 to 180 Servo Motors Function Description Sin(number) Returns the sine value of its argument Sine Function Description Sin(number) Returns the sine value of its argument SPI Function Description SpiByte(byte) byte: 0 to 255 - Returns: Read byte value SpiCfg(mode, frequency) mode: 0 to 3 - frequency: 200 to 20000 (200KHz to 20MHz) Square Root Function Description Sqrt(number) Returns the square root value of it's argument String Numbers Function Description Str(number) Returns number as string when need in arguments Tangent Function Description Tan(number) Returns the tangent of it's argument Temperature Function Description Temp(pin, type) pin: pin number - type: DHT11 = 11, DHT12 = 12, DHT22 = 22, DHT21 = 21 - **Returns: Temperature in Celsius Ticks Function Description TickMs() Read system ticks in milliseconds TickUs() Read system ticks in microseconds Touch Function Description TouchRead(pin) pin: pin number, 'x' or 'y' - Returns: 0 = pin not touched or pin 1 = touched - Touch Screen Returns: -1 = not touched or x and y position Trunicate Function Description Trunc(number) Returns the truncated value of it's argument Version Function Description Version Returns firmware and device versions Wait Function Description Wait(duration) duration: in milliseconds"
  },
  "software/engine/samples/basic.html": {
    "href": "software/engine/samples/basic.html",
    "title": "",
    "keywords": "Basic Samples These samples don't require you to wire anything and utilize the on-board components, when available, of the supported hardware. Example: LED, Buttons, Buzzer, and Screen. Blink On-board LED @Loop DWrite('L',1) : Wait(250) DWrite('L',0) : Wait(250) Goto Loop Analog Blink On-board LED @Loop For i=0 to 100 Step 10 AWrite('L', i) : Wait(50) Next For i=100 to 0 Step -10 AWrite('L', i) : wait(50) Next Goto Loop On-board Buttons BtnEnable('a',1) BtnEnable('b',1) @Loop x=BtnDown('a') y=BtnDown('b') If x=1 PrintLn(\"Button A\") Wait(500) End If y=1 PrintLn(\"Button B\") Wait(500) End Goto Loop On-board Buzzer # G Beep('p', 392, 500) # A Beep('p', 440, 500) # F Beep('p', 349, 250) # F octave lower Beep('p', 175, 250) # C Beep('p', 262, 1000) On-board Display Small Text LcdClear(0) LcdText(\"Hello World\",1,10,10) LcdShow() On-board Display Large Text LcdClear(0) LcdTextS(\"Hello\",1,0,0,2,2) LcdTextS(\"World\",1,15,15,2,2) LcdShow()"
  },
  "software/engine/samples/falling-bird.html": {
    "href": "software/engine/samples/falling-bird.html",
    "title": "Falling Bird Game",
    "keywords": "Falling Bird Game In this example we create 2 different versions of the same game one using a NeoPixel Matrix, and other using the BrainPad Pulse and its on-board screen. NeoPixel Falling Bird This sample creates a simple falling bird type game using a NeoPixel matrix. The object is for the player to move to avoid random obstacles. Hardware: Any device supporting DUE-Script. In this case we're using the BrainPad Pulse with its built-in A button. NeoPixel 16x16 Matrix with zig-zag matrix configuration w=16 # Width of the matrix u=4 # Player X position v=8 # Player Y position t=0 # Player tail Y offset b=15 # Wall X position h=4 # Wall height g=6 # Wall gap BtnEnable('a', 1) # Game loop @loop NeoClear() plyr() wall() coll() NeoShow(0,256) wait(50) goto loop # Handle the player @plyr if BtnDown('a') if v>0:v=v-1:end t=1 else if v<15:v=v+0.5:end t=-1 end x=u y=trunc(v) pxl() NeoSet(p, 64,0,64) x=x-1 y=y+t pxl() NeoSet(p, 64,0,64) return # Update wall @wall b=b-0.25 if b<=0 b=15 g=4+rnd(2) h=2+rnd(6) end for i=0 to 1 x=trunc(b)+i for y=0 to h pxl() NeoSet(p, 0,64,0) next for y=h+g to 15 pxl() NeoSet(p, 0,64,0) next next return # Check collision @coll i=trunc(b) if i != u && i != u-1 :return:end if v<=h:goto die:end if v>=h+g:goto die:end return # Player died @die for i=0 to 20 x=(u-2)+rnd(4) y=(v-2)+rnd(4) pxl() NeoSet(p, rnd(64),0,0) NeoShow(0,256) next b=15 return # Formula for index into 16x16 NeoPixel Matrix # p=pxl(x,y) @pxl p = x*w+(x&1)*(w-1)+(1-2*(x&1))*y return Pulse Falling Bird This sample creates a falling bird game just like the NeoPixel version NeoPixel version of the game. The object is for the player to move to avoid random obstacles. Hardware: Brainpad Pulse u=4 # Player X position v=8 # Player Y position t=0 # Player tail Y offset b=31 # Wall X position h=4 # Wall height g=6 # Wall gap BtnEnable('a', 1) # Game loop @loop LcdClear(0) plyr() wall() coll() LcdShow() goto loop # Handle the player @plyr if BtnDown('a') if v>0:v=v-1:end t=1 else if v<15:v=v+0.5:end t=-1 end x=u y=trunc(v) pxl() x=x-1 y=y+t pxl() return # Update wall @wall b=b-0.5 if b<=0 b=31 g=4+rnd(2) h=2+rnd(6) end x=trunc(b) for y=0 to h pxl() next for y=h+g to 15 pxl() next return # Check collision @coll i=trunc(b) if i != u:return:end if v<=h:goto die:end if v>=h+g:goto die:end return # Player died @die for i=0 to 20 x=(u-2)+rnd(4) y=(v-2)+rnd(4) pxl() LcdShow() next b=31 return # Plot large pixel # p=pxl(x,y) @pxl #for i=0 to 2: for j=0 to 3:LcdPixel(1, x*4+j, y*3+i):next:next LcdPixel(1, x*4, y*3) LcdPixel(1, x*4+1, y*3) LcdPixel(1, x*4+2, y*3) LcdPixel(1, x*4+3, y*3) LcdPixel(1, x*4, y*3+1) LcdPixel(1, x*4+1, y*3+1) LcdPixel(1, x*4+2, y*3+1) LcdPixel(1, x*4+3, y*3+1) LcdPixel(1, x*4, y*3+2) LcdPixel(1, x*4+1, y*3+2) LcdPixel(1, x*4+2, y*3+2) LcdPixel(1, x*4+3, y*3+2) return"
  },
  "software/engine/samples/neopixel-matrix.html": {
    "href": "software/engine/samples/neopixel-matrix.html",
    "title": "NeoPixel 16x16 Matrix",
    "keywords": "NeoPixel 16x16 Matrix NeoPixel is an addressable LED that actually contains 3 LEDs, RED, GREEN, and BLUE. These three LEDs combine to make just about any color. NeoPixels come in many different configurations, from 1 single NeoPixel to panels containing many. DUE allows for up to 256 NeoPixel. This is perfect for a 16x16 setup. Hardware: Any device supporting DUELink NeoPixel 16x16 Matrix Set-up: Connecting the panel is easy, we just need to connect three wires POWER, GND, and DATA to control all the LEDs. On the back of most NeoPixel panels are 3 sets of cables connected to the panel. OUT: connector is used to connect panels together. POWER: is used to connect 5V external power source to the panel. This is often necessary when using many LEDs. IN: connector is where we connect our hardware to the NeoPixel. We connect PIN 1 DUE enabled hardware to the wire labeled DIN, in this case the wire is the green wire. Add a picture frame: We took 2 5x7\" picture frames and connected the longer ends together to make a picture frame to hold our NeoPixel. We even used the back of the picture frames as a built-in stand. Sine wave This sample shows a sine wave scrolling along the matrix # NeoPixel - Moving sine wave h=16:w=16 z=3.1415926/6 i=0 @loop NeoClear() for x=0 to 15 y = 8+sin((x+i)*z)*6 pxl() NeoSet(p,0,128,0) next NeoShow(0,256) i=i+1 goto loop # Formula for index into 16x16 NeoPixel Matrix # p=pxl(x,y) @pxl p = x*w+(x&1)*(w-1)+(1-2*(x&1))*y return Colorful sine wave This sample shows a colorful sine wave scrolling along the matrix # NeoPixel - Colorful Moving sine wave h=16:w=16 i=0 z=3.1415926/6 @loop NeoClear() for x=0 to 15 d = x+i y = 8+sin(d*z)*6 pxl() NeoSet(p,128,0,0) y = 8+sin((d+1)*z)*6 pxl() NeoSet(p,0,128,0) y = 8+sin((d+2)*z)*6 pxl() NeoSet(p,0,0,128) next NeoShow(0,256) i=i+1 goto loop # Formula for index into 16x16 NeoPixel Matrix # p=pxl(x,y) @pxl p = x*w+(x&1)*(w-1)+(1-2*(x&1))*y return Rainbow This sample shows a colorful rainbow # NeoPixel - Rainbow h=16:w=16 z=3.1415926/15 NeoClear() for x=0 to 15 for i=4 to 8 y = i+sin(x*z)*6 pxl() if i%5=0:NeoSet(p,0,0,128):end if i%5=1:NeoSet(p,0,128,0):end if i%5=2:NeoSet(p,0,128,128):end if i%5=3:NeoSet(p,128,0,0):end if i%5=4:NeoSet(p,128,0,128):end next next NeoShow(0,256) exit # Formula for index into 16x16 NeoPixel Matrix # p=pxl(x,y) @pxl p = x*w+(x&1)*(w-1)+(1-2*(x&1))*y return"
  },
  "software/engine/samples/pulse-analogclock.html": {
    "href": "software/engine/samples/pulse-analogclock.html",
    "title": "Pulse Analog Clock",
    "keywords": "Pulse Analog Clock This advanced sample turns your Brainpad Pulse into an analog clock Hardware: Brainpad Pulse BrainPower (Optional) This example demonstrates advanced features of the DUE-Script language. Using arrays to store X,Y coordinates Using variable as both arrays and numbers (very advanced feature to save variables) # Pulse - LCD Clock # Arrays to store the X and Y coordinates of each hand of the clock # Index 0 - X # Index 1 - Y dim h[2] dim m[2] dim s[2] # Numeric variables storing the current value for each of the hands h=5 m=0 s=0 p=3.1415926 @loop LCDClear(0) face() time() LCDShow() Wait(1000) goto loop # Draw the clock face @face # Draw the small dot on the clock face for i=0 to 59 m[0]=25*cos(i*p/30):m[1]=25*sin(i*p/30) LCDPixel(1,64+m[0],32+m[1]) next # Draw the large dots for every hour for i=0 to 11 m[0]=25*cos(i*p/6):m[1]=25*sin(i*p/6) LCDCircle(1,64+m[0],32+m[1],2) next return # Calculate and draw the new hand positions @time h[0]=16*cos(h*p/6):h[1]=16*sin(h*p/6) m[0]=20*cos(m*p/30):m[1]=20*sin(m*p/30) s[0]=25*cos(s*p/30):s[1]=25*sin(s*p/30) if s=60:s=0:m=m+1:end if m=60:m=0:h=h+1:end if h=12:h=0:end s=s+1 LCDLine(1,64,32,64+h[0],32+h[1]) LCDLine(1,64,32,64+m[0],32+m[1]) LCDLine(1,64,32,64+s[0],32+s[1]) return"
  },
  "software/engine/samples/pulse-bouncingball.html": {
    "href": "software/engine/samples/pulse-bouncingball.html",
    "title": "Pulse Bouncing Ball",
    "keywords": "Pulse Bouncing Ball This sample bounces a ball of the 4 edges of the screen Hardware: Brainpad Pulse # Pulse - LCD Bouncing ball x=64 # Ball X location y=32 # Ball Y location r=5 # Ball radius a=3 # Ball X Speed b=2 # Ball Y Speed @loop LCDClear(0) # Clear the screen LCDCircle(1,x,y,r) # Draw the ball LCDShow() # Update the screen x=x+a:y=y+b # Move the ball # Check if the ball hit one of the edges # if it did then reverse the direction and make a sound if x<r || x>=(128-r):a=-a:beep('p',100,16):end if y<r || y>=(64-r):b=-b:beep('p',100,16):end goto loop"
  },
  "software/engine/samples/pulse-falling-bird.html": {
    "href": "software/engine/samples/pulse-falling-bird.html",
    "title": "Pulse Flappy Birds",
    "keywords": "Pulse Flappy Birds This sample creates a falling bird game just like the NeoPixel version NeoPixel version of the game. The object is for the player to move to avoid random obstacles. Hardware: Brainpad Pulse u=4 # Player X position v=8 # Player Y position t=0 # Player tail Y offset b=31 # Wall X position h=4 # Wall height g=6 # Wall gap BtnEnable('a', 1) # Game loop @loop LcdClear(0) plyr() wall() coll() LcdShow() goto loop # Handle the player @plyr if BtnDown('a') if v>0:v=v-1:end t=1 else if v<15:v=v+0.5:end t=-1 end x=u y=trunc(v) pxl() x=x-1 y=y+t pxl() return # Update wall @wall b=b-0.5 if b<=0 b=31 g=4+rnd(2) h=2+rnd(6) end x=trunc(b) for y=0 to h pxl() next for y=h+g to 15 pxl() next return # Check collision @coll i=trunc(b) if i != u:return:end if v<=h:goto die:end if v>=h+g:goto die:end return # Player died @die for i=0 to 20 x=(u-2)+rnd(4) y=(v-2)+rnd(4) pxl() LcdShow() next b=31 return # Plot large pixel # p=pxl(x,y) @pxl for k=0 to 2:for j=0 to 3:LcdPixel(1, x*4+j, y*3+k):next:next return"
  },
  "software/engine/samples/pulse-gamer-pong.html": {
    "href": "software/engine/samples/pulse-gamer-pong.html",
    "title": "BrainGamer - Pong",
    "keywords": "BrainGamer - Pong Pair your Pulse with the Brain Gamer to create the first game ever Pong! Hardware: Brainpad Pulse BrainGamer #BrainGamer Pong @Start a = 30 #Left Player Position b = 30 #Right Player Position g = 10 #Ball x h = 2.3 #Ball x direction i = 10 #Ball y j = 2.6 #Ball y direction s = 0 #Player1 Score t = 0 #Player2 Score w = 0 #Check Win @Loop LcdClear(0) g = g + h #Move Ball X i = i + j #Move Ball Y if i < 5 || i> 55: #Bounce off top or bottom walls j = j* -1 End LcdFill(1, g, i, 4, 4) #Draw Ball if g > 118: if i >= (b - 1) && i <= (b + 12) #Add code here when player hits ball h = h* -1 Sound(256,100,50) else #Add code here when player misses s = s + 1 g = 15 Von()#Vibrate BrainGamer Wait(100) Voff()#Turn off Vibrate End End if g < 12: if i >= (a - 1) && i <= (a + 12) #Add code here when player hits ball h = h* -1 Sound(256,100,50) else #Add code here when player misses t=t+1 g=115 Von()#Vibrate BrainGamer Wait(100) Voff()#Turn off Vibrate End End Rocker() #Check Rocker Move if y < 40:a = a - 4:End #Move Left Paddle Up if y > 60:a = a + 4:End #Move Left Paddle Down if a < 5:a = 5:End #Left Paddle Hits Top if a > 50:a = 50:End #Left Paddle Hits Bottom LcdFill(1, 10, a, 2, 10) #Draw Left Paddle Keys() #Check Key Press if u = 0:b = b - 4:End #Move Right Paddle Up if d = 0:b = b + 4:End #Move Right Paddle Down if b < 5:b = 5:End #Right Paddle Hits Top if b > 50:b = 50:End #Right Paddle Hits Bottom LcdFill(1,120,b,2,10) #Draw Right Paddle For n = 0 to 64 step 10 #Draw Net LcdLine(1,64,n,64,n+5) Next if s = 5 LcdClear(0) LcdTextS(\"Player 1\",1,5,0,2,2) LcdTextS(\"WINS!\",1,25,20,2,2) LcdShow() w=1 Wait(3000) End if t = 5 LcdClear(0) LcdTextS(\"Player 2\",1,5,0,2,2) LcdTextS(\"WINS!\",1,25,20,2,2) LcdShow() w=1 Wait(3000) End if w = 1 #If winner play sound and restart Sound(256,1000,50) Sound(200,1000,50) Sound(256,1000,50) Wait(1500) Goto Start() End LcdText(str(s),1, 50, 5); LcdText(str(t),1, 74, 5); LcdShow() Wait(10) Goto Loop Exit ##################################### ### BrainGamer Driver ### ##################################### ### variables used by driver ### ### x,y,u,d,l,r ### ##################################### ### Rocker ### # Reads the rocker position into x and y @Rocker x = ARead(4) y = ARead(3) Return ### Activate Vibrator ### @Von DWrite(8,0) Return ### Deactivate Vibrator ### @Voff DWrite(8,1) Return ### Read Keypad #### # Reads the 4 buttons into U,D,L,R @Keys u = DRead(14,1) d = DRead(15,1) l = DRead(13,1) r = DRead(16,1) Return return"
  },
  "software/engine/samples/pulse-gamer-sketch.html": {
    "href": "software/engine/samples/pulse-gamer-sketch.html",
    "title": "BrainGamer - Sketch",
    "keywords": "BrainGamer - Sketch Pair your Pulse with the Brain Gamer to create one of the first video games ever made. Hardware: Brainpad Pulse BrainGamer This example demonstrates the use of both digital and analog inputs. Pin# Rocker X 4 Rocker Y 3 Up 14 Down 15 Left 13 Right 16 # BrainGamer - Sketch init() @loop # Gamer Btn-X - Clear the image if dread(13, 1)=0 init() end # Draw the pixel LCDPixel(1,x,y) LCDShow() # Read the joystick u=aread(4) # Joystick-X v=aread(3) # Joystick-Y # Move the pen based on the joystick position if u<45:x=x+1:end if u>55:x=x-1:end if v<45:y=y-1:end if v>55:y=y+1:end # Wrap around the screen edges if x>127:x=0:end if x<0:x=127:end if y>63:y=0:end if y<0:y=63:end goto loop # Initialize the scetcher @init x=64 y=32 LCDClear(0) return"
  },
  "software/engine/samples/rotary-neopixel.html": {
    "href": "software/engine/samples/rotary-neopixel.html",
    "title": "NeoPixel Rotary",
    "keywords": "NeoPixel Rotary Grove Rotary Module This sample uses a Grove rotary module and with the FEZ Flea attached to a Grove XIAO shield to control a NeoPixel Ring. Hardware: FEZ Flea Grove XIAO Shield Grove Rotary Angle Sensor NeoPixel Ring Software: @loop NeoClear() NeoShow(24) a=ARead(6) NeoSet(a/4,255,0,0) NeoShow(0,24) Wait(50) goto loop"
  },
  "software/engine/script.html": {
    "href": "software/engine/script.html",
    "title": "DUELink Script",
    "keywords": "DUELink Script The DUELink engine includes a scripting language that runs internally on any DUELink Hardware. The scripts are used to tunnel in the commands from a high level language such as Python. It can also be used to run standalone, independent from any host. This very easy-to-learn scripting language is inspired by BASIC and Python. The web-hosted DUELink Console lets developers start experimenting with DUELink Scripts in minutes... no installation is necessary! Operating Modes DUELink Script has two modes Immediate mode and Record mode. Immediate mode commands are executed immediately. Immediate mode commands are a single line of code. This is mainly used when tunneling commands from a host machine. The other mode is Record mode where commands are stored on the device's memory and then can be executed. This is used for either to extend the device's high level API functionality through the script API. It can also be used to save and run functionality on the device to run stand alone away from a host machine. The DUELink Console handles these modes automatically. The following details are only needed when not using DUE Console, like when using a terminal software, like TeraTerm. Immediate Mode The > command is used to switch the system to immediate mode. This in turn will change the prompt to > as well. All statements are executed as soon as entered. > Log(\"Hello World\") Note Immediate Mode is the default mode when device is first connected. Record Mode The Record mode, is entered using the $ command. This will also modify the prompt to $. All statements entered are stored internally and not executed. The run command can be used to execute the program. The device will also automatically run a program on power up. Statement Description $ Sets the device in record mode > Exits record mode and returns to direct mode The following statements control the program recorded in flash, but can be used in both Immediate or Record modes. When used in Record mode these special statements execute, but are not added to the program in flash. Statement Description Run Executes the program stored in flash New Erases the program stored in flash List Returns all the code in your program Tip A running program can be terminated by hitting the ESC key, DEL Key, or Backspace Key. > $ $ LogLn(x) $ LogLn(y) $ > > x=1:y=2 > Run 1 2 >List LogLn(x) LogLn(y) >new Note The DUE Console hides the prompts and automatically switches to the appropriate mode. Script Features DUE Scripts are not case sensitive. Its syntax is very simple and inspired by BASIC coding language. The power of DUE Scripts comes from its simplicity rather than from its feature set. This is a perfect language to teach someone coding. Users that require serious coding should be using the DUE Platform combined with one of the many available coding languages. Still, DUE Scripts can be used to extend those languages, as detailed below. Log & Print Log() is a function that sends its argument to the console or terminal window. These arguments can be variables, strings, or equations. Log() can handle multiple arguments. LogLn() adds a line break to each log statement. x=100 Log(x) Log(\"Hello World\") Log(x+x) Log(x,\"Hello World\", x+x) Print() and PrintLn() are identical to Log() and LogLn() except the output goes to the screen instead of console log window. x=100 PrintLn(x) PrintLn(\"Hello World\") PrintLn(x+x) PrintLn(x,\"Hello World\", x+x) Comments The # character is used to identify a comment. Comments are ignored by the program, text added to help developers understand the code. # This is a comment x=10 Print(x) # This is also a comment Variables DUE Script has a fixed set of 26 variables, one for each letter, assigned to a to z. The only data type used in DUE is float. All variables created are global in nature. To use a variable, simply use x=5.5 Operands DUE Script supports the following operators. Mathematical + Add - Subtract * Multiply / Divide % Modulus, the remainder Comparators > Greater Than < Less Than >= Greater Than or Equal To <= Less Than or Equal To = Equal != Not Equal Logical && And || Or Bitwise & Bitwise And | Bitwise Or << Shift Right >> Shift Left Arrays Similarly to variables, arrays are fixed to 26 arrays. They are assigned to letters a to z. DUE Script differentiates between variable a and array a[] when square brackets are used. Arrays are size zero by default and can be sized, or resized using Dim. This is an example that uses both, variables and arrays: Dim a[10] For i=0 to 9:a[i]=i*2:Next For i=0 to 9:PrintLn(a[i]):Next The output will look like: 0 2 4 6 8 10 12 14 16 18 Tip Use Dim a[0] to free up the memory reserved for array a[]. Arrays can be initialized in two different ways. Declare an array and initialize it with values at the same time. Note Range(Len(array)) returns the length of the array. Dim x[6] = [1,2, 3,4, 5,6] For i in Range(Len(x)) PrintLn(x[i]) Next The second way is to create the array first, then populate it later. Dim x[6] x = [7,8, 9,10, 11,12] For i in Range(Len(x)) PrintLn(x[i]) Next There are some specific things we must know about initializing arrays NOTE: Multi-line initializers must have a comma ending the line if the following line will have more data for the initializer (see the examples above) Multi-line initializers can only be used in \"record\" mode. In immediate mode, the initializer must be on a single line. Initializers are always run, so if the initializer is inside a loop every time the dim or assignment initializer is encountered it will reinitialize the data in the array You can have fewer values in the initializer than what the array holds, but you cannot have more. You will get an error indicating that a ] was expected if there are too many elements in the initializer Since we do not want to do too many dynamic allocations, the size of the array must be specified when using dim even when initializing the array For-Loop The For-Loop has two different syntax styles. BASIC and Python style. BASIC Style The BASIC style For-Loop includes the last number in the range. # Counting Up For i=1 to 5 Print(i,\",\") Next Output: 0,1,2,3,4,5, # Counting Up in increments of 10 For i=1000 to 1 Step 10 PrintLn(i) Next # Counting Down in increments of 10 For i=1000 to 1 Step -10 PrintLn(i) Next Python Style DUE Script also allows For Loops written similar to Python. The last number of the range is not included in output. # Range with only stop value For i in range(5) Print(i,\",\") next Output: 0,1,2,3,4, # Range with start and stop value For i in range(1,5) Print(i,\",\") next # Range with start, stop, and step value For i in range(1,5,2) Print(i,\",\") next # Range with start, stop, and negative step value For i in range(10,1,-2) Print(i,\",\") next If-Statement If-Statements must end with the End command. This will only end the If-Statement and not your program. If x=1 PrintLn(\"one\") Else PrintLn(\"not one\") End If-Statements can also be nested within each other. Each If-Statement requires an End command to terminate its own process. If x=1 PrintLn(\"one\") Else If x =2 PrintLn(\"two\") Else PrintLn(\"not one or two\") End End Labels Labels are needed to redirect the program. They are used by Goto when calling a subroutine. A Label is created by using the @ symbol in front of the desired label. Labels are limited to 6 characters. Goto Goto is useful for repeating tasks indefinitely by sending to a specific Label name. @Loop # add code here that runs forever Goto Loop Exit & Return Exit terminates the program. Print(\"Hello\") Exit Print(\"This will not get printed\") Return send the execution back from a called subroutine, see Subroutines below. Subroutine Developers can use Labels to create their own subroutines to implement \"soft\" like functions in their code. These subroutines are similar to functions but do not take variables or return values. Tip The built-in API offers true functions and therefore do take arguments and return values. User subroutines are always added in recoding mode and resides in nonvolatile memory. A user subroutine starts with a label and ends with a Return. @Mine # add code here Return The subroutine can then be called by its name followed by (). Mine() Note how a subroutine can be called externally from Immediate Mode. This allows for extending DUE Scripts with new commands that can then later be called from Immediate Mode and in turn be called from a high level language, like Python, when connected to a Host. Tip DUE variables are global and any changes inside subroutines will affect variable values outside those subroutines. Combining Commands Multiple commands can be combined on a single line. This is especially useful when using Immediate mode where a single line is required. To use multiple command, a : symbol is used. This is an example of a for loop in a single line For i=1 to 1000 Step 10:PrintLn(i):Next Good Practices Recorded DUE Scripts are executed immediately on power up (the run command is issued internally). If the user doesn't want any of the code to run, they can start the program with an Exit statement. And then the 'Exit' can be flowed by a label, for example '@Go'. This code can be saved to the device using Record Mode: Exit @Go Print(\"Only when Go!\") The program will not execute on power up due to the Exit command. But now calling Go() in immediate mode will produce \"Only when Go!\". Another good practice is to use the on-board LED as an activity LED to show that the device is running. Simply start your program by adding Led(200,200,-1)."
  },
  "software/engine/streams.html": {
    "href": "software/engine/streams.html",
    "title": "Streams",
    "keywords": "Streams DUELink Scripts are built to be ASCII human-friendly. This works great when using DUE Script. However, there are instances where speed or raw binary data is required. For example, when updating a display using I2C. This is where streams come in handy. Provided libraries, such as Python, use streams internally whenever possible. Tip Understanding and utilizing stream is only needed by advanced users. A stream command initiates the request, such as LcdStream(). Once this command is received and accepted by the device, the & symbol will be returned indicating readiness. The host can now send the entire data, exactly to the required byte count. See the individual stream command for details on what data count and structure to be sent. Tip Streams can't be used directly by typing in ASCII commands, like when using the console. See the source code of one of the provided libraries for reference."
  },
  "software/getting-started.html": {
    "href": "software/getting-started.html",
    "title": "Getting Started",
    "keywords": "Getting Started Hardware Setup Make sure your DUELink hardware is functional using demo.duelink.com. Check that the board has the latest firmware. Compare the version shown on the demo page when the device is connected to the version found on the Downloads page. Software Setup DUELink is made for software developers so we are assuming you already have a development machine that is already building Python or JavaScrpt programs for example. See the Coding Options to see the available options and install the available libraries. Blink LED Following one of the available Coding Options will reveal all the needed steps to blink the on-board LED using the LED API, which handles the LED internally inside the DUELink Engine. Here is a similar example but this one uses a loop on the host side to set the LED high and low. Python JavaScript .NET from DUELink.DUELinkController import DUELinkController import time availablePort = DUELinkController.GetConnectionPort() duelink = DUELinkController(availablePort) while True: duelink.Led.Set(1,0,0) time.sleep(0.5) duelink.Led.Set(0,1,0) time.sleep(0.5) const { SerialUSB } = require(\"dlserialusb\"); const { DUELinkController } = require(\"duelink\"); const { Util } = require(\"duelink\"); async function Blinky() { let duelink = new DUELinkController(new SerialUSB()); await duelink.Connect(); while (true){ await duelink.Led.Set(1, 0, 0) await Util.sleep(500) await duelink.Led.Set(0, 1, 0) await Util.sleep(500) } } Blinky() var availablePort = DUELinkController.GetConnectionPort(); var duelink = new DUELinkController(availablePort); while (true) { duelink.Led.Set(1, 0, 0); Thread.Sleep(500); duelink.Led.Set(0, 1, 0); Thread.Sleep(500); } Special Pins Boards may include on-board features that can be accessed through the API. Pin \"number\" On-board Feature 'a' or 'A' Button A 'b' or 'B' Button B 'p' or 'P' Piezo buzzer 'l' or 'L' LED This is an example of how to blink the on-board LED using the Digital class. Python JavaScript .NET from DUELink.DUELinkController import DUELinkController import time availablePort = DUELinkController.GetConnectionPort() duelink = DUELinkController(availablePort) while True: duelink.Digital.Write('l', 1) time.sleep(0.5) duelink.Digital.Write('l', 0) time.sleep(0.5) import {SerialUSB} from './serialusb.js'; import * as DUELink from './duelink.js'; import { Util } from \"./util.js\"; let duelink = new DUELink.DUELinkController(new SerialUSB()); await duelink.Connect(); while (true){ await duelink.Digital.Write('l', 1) await Util.sleep(500) await duelink.Digital.Write('l', 0) await Util.sleep(500) } var availablePort = DUELinkController.GetConnectionPort(); var duelink = new DUELinkController(availablePort); while (true) { duelink.Digital.Write('l', 1); Thread.Sleep(500); duelink.Digital.Write('l', 0); Thread.Sleep(500); }"
  },
  "software/intro.html": {
    "href": "software/intro.html",
    "title": "Software Support",
    "keywords": "Software Support Get Started now to access the physical world with only a few lines code using the core library that have a friendly API using one of the multiple available coding options, such as Python and JavaScript. Advanced users can also extend the system through the internal Engine that runs DUELink Scripts."
  },
  "software/legal.html": {
    "href": "software/legal.html",
    "title": "Legal",
    "keywords": "Legal License This product with its accompanying firmware is licensed royalty-free for commercial and noncommercial use. Using the provided firmware on any non-official product requires additional licensing. The provided documentation/schematics/libraries/sources are not to be used in any manner outside of implementing and using this GHI Electronics product in your design. Disclaimer IN NO EVENT SHALL GHI ELECTRONICS, LLC BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS PRODUCT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. GHI ELECTRONICS LINE OF PRODUCTS ARE NOT DESIGNED FOR LIFE SUPPORT APPLICATIONS. SPECIFICATIONS, PRICE AND AVAILABILITY ARE SUBJECT TO CHANGE WITHOUT ANY NOTICE. Security WE DO OUR BEST TO PROVIDE SECURE PRODUCTS THAT PROTECT YOUR INTELLECTUAL PROPERTY (CODE) AND ARE DIFFICULT TO EXPLOIT. HOWEVER, NO PRODUCT IS COMPLETELY SECURE. THERE ARE DISHONEST AND POSSIBLY ILLEGAL METHODS THAT CAN BE USED TO CIRCUMVENT OUR CODE PROTECTION AND SECURITY FEATURES. GHI ELECTRONICS, LLC SHALL IN NO EVENT BE HELD LIABLE IN ANY WAY FOR THE EXPLOITATION OF SECURITY VULNERABILITIES OR ANY USE OR MISUSE OF OUR PRODUCTS RESULTING IN THE LOSS OR THEFT OF CODE OR OTHER INTELLECTUAL PROPERTY. Product Longevity GHI ELECTRONICS, LLC IS PRIMARILY INVOLVED IN PROVIDING ELECTRONIC COMPONENTS, MODULES, AND ACCOMPANYING SOFTWARE THAT ARE USED BY OUR CUSTOMERS TO CREATE NEW AND INNOVATIVE PRODUCTS. IN SUPPORT OF OUR CUSTOMERS, WE DO OUR BEST TO DESIGN AND MANUFACTURE PRODUCTS WITH THE LONGEST LIFE CYCLE POSSIBLE. HOWEVER, OUR PRODUCT AVAILABILITY IS DEPENDENT UPON THE AVAILABILITY OF THE ELECTRONIC COMPONENTS FROM WHICH OUR PRODUCTS ARE BUILT. GHI ELECTRONICS, LLC WILL IN NO WAY BE HELD LIABLE FOR LOSSES OF ANY KIND, INCURRED BY OUR CUSTOMERS OR OTHERS, WHETHER MONETARY OR OTHERWISE, AS A RESULT OF GHI ELECTRONICS' PRODUCT SHORTAGES, DELAYS IN AVAILABILITY, OR DISCONTINUATION."
  },
  "software/resources.html": {
    "href": "software/resources.html",
    "title": "Resources",
    "keywords": "Resources Hardware DUELink Spider schematic DUELink Spider 3D Enclosure Libraries The official Python, JavaScript and .NET libraries for DUELink: Libraries Samples Sample projects can be found here: Samples One of the samples is the Demo website. DUELink Console DUELink Console sources are available (https://github.com/ghi-electronics/due-console)"
  }
}